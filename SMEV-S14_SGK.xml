<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="SMEV-S14-RTK" resourceRoot="" soapui-version="5.2.0" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" id="0d392a73-7ef4-4a63-8cd9-e652f032c870" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="GenerateSOAPRequest"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="GetRequest"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="SMEVMessageExchangeSoap11Binding" type="wsdl" bindingName="{urn://x-artefacts-smev-gov-ru/services/message-exchange/1.2}SMEVMessageExchangeSoap11Binding" soapVersion="1_1" anonymous="optional" definition="http://10.77.102.150:7500/ws?wsdl" id="71fffb9b-a06b-4deb-b010-21ca444a82bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.215.0.64:7500/ws?wsdl"><con:part><con:url>http://10.215.0.64:7500/ws?wsdl</con:url><con:content><![CDATA[<!--Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.2.8 svn-revision#13980.-->
<wsdl:definitions targetNamespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/1.2" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsoma="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization" xmlns:wsi="http://ws-i.org/schemas/conformanceClaim/" xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/1.2" xmlns:types="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:fault="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2">
  <wsdl:documentation>Веб-сервис, предоставляемый СМЭВ, через который 
		все участники межведомственного взаимодействия обмениваются сообщениями.</wsdl:documentation>
  <jaxws:bindings xmlns:jaxws="http://java.sun.com/xml/ns/jaxws">
    <!--Напишите здесь имя пакета, в который должны попасть классы, сгенерированные из этого wsdl с помощью ws import-->
    <jaxws:package name="ru.it.smev.message_exchange.autogenerated.service.v1_2"/>
  </jaxws:bindings>
  <wsp:Policy wsu:Id="MTOM_Policy">
    <wsoma:OptimizedMimeSerialization wsp:Optional="true"/>
  </wsp:Policy>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" schemaLocation="http://10.215.0.64:7500/ws?xsd=3"/>
      <xs:import namespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2" schemaLocation="http://10.215.0.64:7500/ws?xsd=2"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="SendRequestRequestMsg">
    <wsdl:part name="parameters" element="types:SendRequestRequest"/>
  </wsdl:message>
  <wsdl:message name="SendRequestResponseMsg">
    <wsdl:part name="parameters" element="types:SendRequestResponse"/>
  </wsdl:message>
  <wsdl:message name="SendResponseRequestMsg">
    <wsdl:part name="parameters" element="types:SendResponseRequest"/>
  </wsdl:message>
  <wsdl:message name="SendResponseResponseMsg">
    <wsdl:part name="parameters" element="types:SendResponseResponse"/>
  </wsdl:message>
  <wsdl:message name="GetRequestRequestMsg">
    <wsdl:part name="parameters" element="types:GetRequestRequest"/>
  </wsdl:message>
  <wsdl:message name="GetRequestResponseMsg">
    <wsdl:part name="parameters" element="types:GetRequestResponse"/>
  </wsdl:message>
  <wsdl:message name="GetStatusRequestMsg">
    <wsdl:part name="parameters" element="types:GetStatusRequest"/>
  </wsdl:message>
  <wsdl:message name="GetStatusResponseMsg">
    <wsdl:part name="parameters" element="types:GetStatusResponse"/>
  </wsdl:message>
  <wsdl:message name="GetResponseRequestMsg">
    <wsdl:part name="parameters" element="types:GetResponseRequest"/>
  </wsdl:message>
  <wsdl:message name="GetResponseResponseMsg">
    <wsdl:part name="parameters" element="types:GetResponseResponse"/>
  </wsdl:message>
  <wsdl:message name="AckRequestMsg">
    <wsdl:part name="parameters" element="types:AckRequest"/>
  </wsdl:message>
  <wsdl:message name="AckResponseMsg">
    <wsdl:part name="parameters" element="types:AckResponse"/>
  </wsdl:message>
  <wsdl:message name="GetIncomingQueueStatisticsRequestMsg">
    <wsdl:part name="parameters" element="types:GetIncomingQueueStatisticsRequest"/>
  </wsdl:message>
  <wsdl:message name="GetIncomingQueueStatisticsResponseMsg">
    <wsdl:part name="parameters" element="types:GetIncomingQueueStatisticsResponse"/>
  </wsdl:message>
  <wsdl:message name="BusinessDataTypeIsNotSupportedException">
    <wsdl:part name="parameters" element="fault:BusinessDataTypeIsNotSupported"/>
  </wsdl:message>
  <wsdl:message name="SignatureVerificationFaultException">
    <wsdl:part name="parameters" element="fault:SignatureVerificationFault"/>
  </wsdl:message>
  <wsdl:message name="InvalidContentException">
    <wsdl:part name="parameters" element="fault:InvalidContent"/>
  </wsdl:message>
  <wsdl:message name="AttachmentContentMiscoordinationException">
    <wsdl:part name="parameters" element="fault:AttachmentContentMiscoordination"/>
  </wsdl:message>
  <wsdl:message name="AttachmentSizeLimitExceededException">
    <wsdl:part name="parameters" element="fault:AttachmentSizeLimitExceeded"/>
  </wsdl:message>
  <wsdl:message name="QuoteLimitExceededException">
    <wsdl:part name="parameters" element="fault:QuoteLimitExceeded"/>
  </wsdl:message>
  <wsdl:message name="AccessDeniedException">
    <wsdl:part name="parameters" element="fault:AccessDenied"/>
  </wsdl:message>
  <wsdl:message name="MessageIsAlreadySentException">
    <wsdl:part name="parameters" element="fault:MessageIsAlreadySent"/>
  </wsdl:message>
  <wsdl:message name="InvalidMessageIdFormatException">
    <wsdl:part name="parameters" element="fault:InvalidMessageIdFormat"/>
  </wsdl:message>
  <wsdl:message name="StaleMessageIdException">
    <wsdl:part name="parameters" element="fault:StaleMessageId"/>
  </wsdl:message>
  <wsdl:message name="EndOfLifeException">
    <wsdl:part name="parameters" element="fault:EndOfLifeReached"/>
  </wsdl:message>
  <wsdl:message name="SMEVFailureException">
    <wsdl:part name="parameters" element="fault:SMEVFailure"/>
  </wsdl:message>
  <wsdl:message name="TransactionCodeInvalidException">
    <wsdl:part name="parameters" element="fault:TransactionCodeInvalid"/>
  </wsdl:message>
  <wsdl:message name="RequestIsNotFoundException">
    <wsdl:part name="parameters" element="fault:RequestIsNotFound"/>
  </wsdl:message>
  <wsdl:message name="TargetMessageIsNotFoundException">
    <wsdl:part name="parameters" element="fault:TargetMessageIsNotFound"/>
  </wsdl:message>
  <wsdl:message name="IncorrectResponseContentTypeException">
    <wsdl:part name="parameters" element="fault:IncorrectResponseContentType"/>
  </wsdl:message>
  <wsdl:message name="SenderIsNotRegisteredException">
    <wsdl:part name="parameters" element="fault:SenderIsNotRegistered"/>
  </wsdl:message>
  <wsdl:message name="RecipientIsNotFoundException">
    <wsdl:part name="parameters" element="fault:RecipientIsNotFound"/>
  </wsdl:message>
  <wsdl:message name="UnknownMessageTypeException">
    <wsdl:part name="parameters" element="fault:UnknownMessageType"/>
  </wsdl:message>
  <wsdl:message name="DestinationOverflowException">
    <wsdl:part name="parameters" element="fault:DestinationOverflow"/>
  </wsdl:message>
  <wsdl:portType name="SMEVMessageExchangePortType">
    <wsdl:documentation>Точка доступа, позволяющая принимать запросы любых типов, 
			а также заявки на предоставление госуслуг.
			Кроме того, через этот сервис производится отмена запросов.
			Поскольку СМЭВ поколения 2 работает в режиме принудительной передачи ответов,
			функциональность "узнать статус запроса и получить ответ, если он готов" отсутствует.</wsdl:documentation>
    <wsdl:operation name="SendRequest">
      <wsdl:documentation>Послать запрос.
				Факт прихода запроса говорит о том, что СМЭВ удостоверился в том, что отправитель
				имеет право на получение данных по этому типу запросов. 
				Дополнительный контроль доступа в ИС-поставщике данных запрещён.
				Тип запроса идентифицируется полным именем (qualified name) элемента //SendRequestRequest/PrimaryContent/element().</wsdl:documentation>
      <wsdl:input message="tns:SendRequestRequestMsg"/>
      <wsdl:output message="tns:SendRequestResponseMsg"/>
      <wsdl:fault name="BusinessDataTypeIsNotSupportedFault" message="tns:BusinessDataTypeIsNotSupportedException">
        <wsdl:documentation>Запрос с таким полным именем корневого элемента не зарегистрирован в СМЭВ (см. //SendRequestRequest/MessagePrimaryContent/element()).
					Вероятные причины: 
						ошибка при формировании содержательной части запроса (см. //SendRequestRequest/MessagePrimaryContent/element()); 
						запрос этого типа ещё не зарегистрирован в СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="TransactionCodeInvalidFault" message="tns:TransactionCodeInvalidException">
        <wsdl:documentation></wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/types/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Содержательная часть сообщения (//SendRequestRequest/PrimaryContent/element()) не прошла валидацию по XSD, 
					зарегистрированной в СМЭВ для этого типа запросов.
					Бизнес-конверт (//SendRequestRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="AttachmentContentMiscoordinationFault" message="tns:AttachmentContentMiscoordinationException">
        <wsdl:documentation>Заголовки вложений не соответствуют содержимому.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="AttachmentSizeLimitExceededFault" message="tns:AttachmentSizeLimitExceededException">
        <wsdl:documentation>Суммарный размер вложений превысил предел, установленный правилами СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="QuoteLimitExceededFault" message="tns:QuoteLimitExceededException">
        <wsdl:documentation>Суммарный размер вложений превысил значения квоты СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="AccessDeniedFault" message="tns:AccessDeniedException">
        <wsdl:documentation>Отправителю не разрешено отправлять запросы этого типа.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможная причина - смена X-400 имени при получении нового сертификата.
					Остальные возможные причины - неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="RecipientIsNotFoundFault" message="tns:RecipientIsNotFoundException">
        <wsdl:documentation>Не найден получатель для запроса.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="DestinationOverflowFault" message="tns:DestinationOverflowException">
        <wsdl:documentation>Очередь, в которую должен быть послано сообщение, переполнена.
					Действия клиента: обратиться в службу техподдержки СМЭВ, и продолжать посылать запрос повторно, до успеха.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно принять по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="MessageIsAlreadySentFault" message="tns:MessageIsAlreadySentException">
        <wsdl:documentation>Сообщение с таким MessageID уже было отправлено ранее.
				Возможно в следующих ситуациях:
				a) Клиент пытался отправить сообщение, отправка прошла успешно, но в конце взаимодействия HTTP соединение оборвалось, 
					и клиент не получил ответ от СМЭВ об успешной отправке. 
					При повторной попытке отправить сообщение клиент получит этот fault. 
					В этой ситуации нужно прекратить пытаться повторно послать сообщение.
				b) Клиент использует алгоритм генерации ID сообщений, не соответствующий МР.
				c) Клиент пытается послать несколько сообщений, используя один и тот же ID.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="InvalidMessageIdFormatFault" message="tns:InvalidMessageIdFormatException">
        <wsdl:documentation>Идентификатор, присвоенный сообщению отправителем, не является корректным строковым представлением UUID, вариант 1 (см. RFC-4122).</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="StaleMessageIdFault" message="tns:StaleMessageIdException">
        <wsdl:documentation>Идентификатор (UUID), присвоенный сообщению отправителем, содержит старый timestamp. 
				Возможно в следующих случаях:
				a) в системе отправителя неверно установлено время. 
					Действия клиента: установить в операционной системе реальное время.
				b) в результате очень плохого качества связи, сообщение пытаются отправить в течение двух суток или более.
					Действия клиента: сгенерировать новый UUID, присвоить его сообщению, отправить сообщение.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="EndOfLifeFault" message="tns:EndOfLifeException">
        <wsdl:documentation>Превышено время жизни сообщения (end of life).
                    Действия клиента: должны предприниматься повторные попытки доставить сообщение,
                    возможно с увеличенным временем жизни.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="SendResponse">
      <wsdl:documentation>Дай сообщение из моей входящей очереди, если она не пуста.</wsdl:documentation>
      <wsdl:input message="tns:SendResponseRequestMsg"/>
      <wsdl:output message="tns:SendResponseResponseMsg"/>
      <wsdl:fault name="BusinessDataTypeIsNotSupportedFault" message="tns:BusinessDataTypeIsNotSupportedException">
        <wsdl:documentation>Ответ с таким полным именем корневого элемента не зарегистрирован в СМЭВ (см. //SendResponseRequest/MessagePrimaryContent/element()).
					Вероятные причины: 
						ошибка при формировании содержательной части ответа (см. //SendResponseRequest/MessagePrimaryContent/element()); 
						схема, в которой описан XML-тип, ещё не зарегистрирован в СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/fault/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно отправить по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Содержательная часть сообщения (//SendResponseRequest/PrimaryContent/element()) не прошла валидацию по XSD, 
					зарегистрированной в СМЭВ для этого типа сообщений.
					Бизнес-конверт (//SendResponseRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать ответ повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="AttachmentContentMiscoordinationFault" message="tns:AttachmentContentMiscoordinationException">
        <wsdl:documentation>Заголовки вложений не соответствуют содержимому.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="AttachmentSizeLimitExceededFault" message="tns:AttachmentSizeLimitExceededException">
        <wsdl:documentation>Суммарный размер вложений превысил предел, установленный правилами СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="QuoteLimitExceededFault" message="tns:QuoteLimitExceededException">
        <wsdl:documentation>Суммарный размер вложений превысил значения квоты СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="IncorrectResponseContentTypeFault" message="tns:IncorrectResponseContentTypeException">
        <wsdl:documentation>Содержимое посылается через метод SendResponse, 
					но, согласно реестру типов запросов СМЭВ, содержательная часть сообщения
					представляет из себя запрос или заявку, а не ответ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможная причина - смена X-400 имени при получении нового сертификата.
					Остальные возможные причины - неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="RecipientIsNotFoundFault" message="tns:RecipientIsNotFoundException">
        <wsdl:documentation>Содержимое посылается через метод SendResponse, 
					но значение //SendResponseRequest/To/text(), по данным СМЭВ,
					не соотевтствует никакому получателю.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="DestinationOverflowFault" message="tns:DestinationOverflowException">
        <wsdl:documentation>Очередь, в которую должен быть послано сообщение, переполнена.
					Действия клиента: обратиться в службу техподдержки СМЭВ, и продолжать посылать ответ повторно, до успеха.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="MessageIsAlreadySentFault" message="tns:MessageIsAlreadySentException">
        <wsdl:documentation>Сообщение с таким MessageID уже было отправлено ранее.
				Возможно в следующих ситуациях:
				a) Клиент пытался отправить сообщение, отправка прошла успешно, но в конце взаимодействия HTTP соединение оборвалось, 
					и клиент не получил ответ от СМЭВ об успешной отправке. 
					При повторной попытке отправить сообщение клиент получит этот fault. 
					В этой ситуации нужно прекратить пытаться повторно послать сообщение.
				b) Клиент использует алгоритм генерации ID сообщений, не соответствующий МР.
				c) Клиент пытается послать несколько сообщений, используя один и тот же ID.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="InvalidMessageIdFormatFault" message="tns:InvalidMessageIdFormatException">
        <wsdl:documentation>Идентификатор, присвоенный сообщению отправителем, не является корректным строковым представлением UUID, вариант 1 (см. RFC-4122).</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="StaleMessageIdFault" message="tns:StaleMessageIdException">
        <wsdl:documentation>Идентификатор (UUID), присвоенный сообщению отправителем, содержит старый timestamp. 
				Возможно в следующих случаях:
				a) в системе отправителя неверно установлено время. 
					Действия клиента: установить в операционной системе реальное время.
				b) в результате очень плохого качества связи, сообщение пытаются отправить в течение двух суток или более.
					Действия клиента: сгенерировать новый UUID, присвоить его сообщению, отправить сообщение.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetStatus">
      <wsdl:documentation>Дай сообщение из моей входящей очереди _запросов_, если она не пуста.</wsdl:documentation>
      <wsdl:input message="tns:GetStatusRequestMsg"/>
      <wsdl:output message="tns:GetStatusResponseMsg"/>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Бизнес-конверт (//GetStatusRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/types/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможные причины:
						- смена X-400 имени при получении нового сертификата.
						- неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault" message="tns:UnknownMessageTypeException">
        <wsdl:documentation>a) Указан тип сообщения, либо не зарегистрированный в СМЭВ.
					b) Текущий клиент не является зарегистрированным поставщиком сведений по запрошенному типу сообщения.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно принять по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetRequest">
      <wsdl:documentation>Дай сообщение из моей входящей очереди _запросов_, если она не пуста.</wsdl:documentation>
      <wsdl:input message="tns:GetRequestRequestMsg"/>
      <wsdl:output message="tns:GetRequestResponseMsg"/>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Бизнес-конверт (//GetRequestRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
                    Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку.
                    Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/types/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
                    Возможные причины:
                    - смена X-400 имени при получении нового сертификата.
                    - неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault" message="tns:UnknownMessageTypeException">
        <wsdl:documentation>a) Указан тип сообщения, либо не зарегистрированный в СМЭВ.
                    b) Текущий клиент не является зарегистрированным поставщиком сведений по запрошенному типу сообщения.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно принять по причине сбоя в инфраструктуре СМЭВ.
                    Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetResponse">
      <wsdl:documentation>Дай сообщение из моей входящей очереди _ответов_, если она не пуста.</wsdl:documentation>
      <wsdl:input message="tns:GetResponseRequestMsg"/>
      <wsdl:output message="tns:GetResponseResponseMsg"/>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Бизнес-конверт (//GetResponseRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/types/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможные причины:
						- смена X-400 имени при получении нового сертификата.
						- неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault" message="tns:UnknownMessageTypeException">
        <wsdl:documentation>Указан тип сообщения, либо не зарегистрированный в СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно принять по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="Ack">
      <wsdl:documentation>Подтверждение получения сообщения из очереди. 
				Должен вызваться после получения сообщения методами GetRequest или GetResponse.</wsdl:documentation>
      <wsdl:input message="tns:AckRequestMsg"/>
      <wsdl:output message="tns:AckResponseMsg"/>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Бизнес-конверт (//AckRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/fault/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможная причина - смена X-400 имени при получении нового сертификата.
					Остальные возможные причины - неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно отправить по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="TargetMessageIsNotFoundFault" message="tns:TargetMessageIsNotFoundException">
        <wsdl:documentation>При попытке подтвердить получение сообщения, СМЭВ не находит неподтверждённого сообщения с таким ID.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetIncomingQueueStatistics">
      <wsdl:documentation>Получение статистики входящих очередей.</wsdl:documentation>
      <wsdl:input message="tns:GetIncomingQueueStatisticsRequestMsg"/>
      <wsdl:output message="tns:GetIncomingQueueStatisticsResponseMsg"/>
      <wsdl:fault name="InvalidContentFault" message="tns:InvalidContentException">
        <wsdl:documentation>Бизнес-конверт (//GetIncomingQueueStatisticsRequest) содержит не все подэлементы, обязательные для заполнения, либо имеет неверный формат.
					Действия клиента: исправить ошибки и послать запрос повторно.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault" message="tns:SignatureVerificationFaultException">
        <wsdl:documentation>ЭП-ОВ не прошла проверку. 
					Действия клиента: см. описание {urn://x-artefacts-smev-gov-ru/smev-core/client-interaction/fault/1.0}SignatureVerificationFault.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault" message="tns:SenderIsNotRegisteredException">
        <wsdl:documentation>Отправитель сообщения не зарегистрирован в СМЭВ.
					Возможная причина - смена X-400 имени при получении нового сертификата.
					Остальные возможные причины - неправильная настройка СМЭВ.</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault" message="tns:SMEVFailureException">
        <wsdl:documentation>Сообщение невозможно отправить по причине сбоя в инфраструктуре СМЭВ.
					Действия клиента: оповестить техподдержку СМЭВ, предпринимать повторные попытки доставить сообщение, без ограничения количества попыток.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SMEVMessageExchangeSoap11Binding" type="tns:SMEVMessageExchangePortType">
    <wsp:PolicyReference URI="#MTOM_Policy"/>
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
    <wsdl:operation name="SendRequest">
      <soap:operation soapAction="urn:SendRequest"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="BusinessDataTypeIsNotSupportedFault">
        <soap:fault name="BusinessDataTypeIsNotSupportedFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="RecipientIsNotFoundFault">
        <soap:fault name="RecipientIsNotFoundFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DestinationOverflowFault">
        <soap:fault name="DestinationOverflowFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AttachmentContentMiscoordinationFault">
        <soap:fault name="AttachmentContentMiscoordinationFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AttachmentSizeLimitExceededFault">
        <soap:fault name="AttachmentSizeLimitExceededFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QuoteLimitExceededFault">
        <soap:fault name="QuoteLimitExceededFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AccessDeniedFault">
        <soap:fault name="AccessDeniedFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="TransactionCodeInvalidFault">
        <soap:fault name="TransactionCodeInvalidFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MessageIsAlreadySentFault">
        <soap:fault name="MessageIsAlreadySentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidMessageIdFormatFault">
        <soap:fault name="InvalidMessageIdFormatFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="StaleMessageIdFault">
        <soap:fault name="StaleMessageIdFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="SendResponse">
      <soap:operation soapAction="urn:SendResponse"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="BusinessDataTypeIsNotSupportedFault">
        <soap:fault name="BusinessDataTypeIsNotSupportedFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IncorrectResponseContentTypeFault">
        <soap:fault name="IncorrectResponseContentTypeFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="RecipientIsNotFoundFault">
        <soap:fault name="RecipientIsNotFoundFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DestinationOverflowFault">
        <soap:fault name="DestinationOverflowFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AttachmentContentMiscoordinationFault">
        <soap:fault name="AttachmentContentMiscoordinationFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AttachmentSizeLimitExceededFault">
        <soap:fault name="AttachmentSizeLimitExceededFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QuoteLimitExceededFault">
        <soap:fault name="QuoteLimitExceededFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MessageIsAlreadySentFault">
        <soap:fault name="MessageIsAlreadySentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidMessageIdFormatFault">
        <soap:fault name="InvalidMessageIdFormatFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="StaleMessageIdFault">
        <soap:fault name="StaleMessageIdFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetRequest">
      <soap:operation soapAction="urn:GetRequest"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault">
        <soap:fault name="UnknownMessageTypeFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetStatus">
      <soap:operation soapAction="urn:GetStatus"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault">
        <soap:fault name="UnknownMessageTypeFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetResponse">
      <soap:operation soapAction="urn:GetResponse"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownMessageTypeFault">
        <soap:fault name="UnknownMessageTypeFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="Ack">
      <soap:operation soapAction="urn:Ack"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="TargetMessageIsNotFoundFault">
        <soap:fault name="TargetMessageIsNotFoundFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetIncomingQueueStatistics">
      <soap:operation soapAction="urn:GetIncomingQueueStatistics"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidContentFault">
        <soap:fault name="InvalidContentFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SMEVFailureFault">
        <soap:fault name="SMEVFailureFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignatureVerificationFaultFault">
        <soap:fault name="SignatureVerificationFaultFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SenderIsNotRegisteredFault">
        <soap:fault name="SenderIsNotRegisteredFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SMEVMessageExchangeService">
    <wsdl:port name="SMEVMessageExchangeEndpoint" binding="tns:SMEVMessageExchangeSoap11Binding">
      <wsdl:documentation>
        <wsi:Claim conformsTo="http://ws-i.org/profiles/basic/1.1"/>
      </wsdl:documentation>
      <soap:address location="http://10.215.0.64:7500/ws"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://10.215.0.64:7500/ws?xsd=3</con:url><con:content><![CDATA[<!--Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.2.8 svn-revision#13980.-->
<xs:schema targetNamespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" elementFormDefault="qualified" attributeFormDefault="unqualified" jxb:version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:basic="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:jxb="http://java.sun.com/xml/ns/jaxb">
  <xs:annotation>
    <xs:documentation>Типы и элементы для веб-сервиса, который СМЭВ предоставляет всем участникам межведомственного взаимодействия для обмена сообщениями.</xs:documentation>
    <xs:appinfo>
      <jxb:schemaBindings>
        <!--Напишите здесь имя пакета, в который должны попасть классы, сгенерированные из этой схемы с помощью ws import-->
        <jxb:package name="ru.it.smev.message_exchange.autogenerated.types.v1_2"/>
      </jxb:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  <xs:import namespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" schemaLocation="http://10.215.0.64:7500/ws?xsd=1"/>
  <xs:element name="SendRequestRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "Послать запрос".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:SenderProvidedRequestData">
          <xs:annotation>
            <xs:documentation>Содержательная часть запроса + служебные данные, заполняемые отправителем.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:AttachmentContentList" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Вложенные файлы - содержимое. Содержимое вынесено из-под ЭП-ОВ, чтобы не нарушать работу MTOM.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //SenderProvidedRequestData.
                            Подпись оставлена необязательной, чтобы клиентов можно было тестировать с упрощёнными эмуляторами СМЭВ.
                            Реальный СМЭВ отбивает сообщения без ЭП-ОВ или ЭП-ПГУ.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendRequestResponse">
    <xs:annotation>
      <xs:documentation>Возвращаемое значение метода "Послать запрос": запрос принят.
                Если запрос не может быть принят, информация о причине отказа передаётся через SOAP fault, см. WSDL-описание сервиса.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:MessageMetadata">
          <xs:annotation>
            <xs:documentation>Данные о сообщении: ID, присвоенный СМЭВ, дата приёма по часам СМЭВ, результат маршрутизации, etc.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="SMEVSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-СМЭВ. Подписан элемент //MessageMetadata.
                            Подпись оставлена необязательной, чтобы клиентов можно было тестировать с упрощёнными эмуляторами СМЭВ.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendResponseRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "Послать ответ на запрос".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:SenderProvidedResponseData"/>
        <xs:element ref="basic:AttachmentContentList" minOccurs="0"/>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //SenderProvidedResponseData.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SendResponseResponse">
    <xs:annotation>
      <xs:documentation>Возвращаемое значение метода "Послать ответ на запрос": ответ принят.
                Если ответ не может быть принят, информация о причине отказа передаётся через SOAP fault, см. WSDL-описание сервиса.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:MessageMetadata">
          <xs:annotation>
            <xs:documentation>Данные о сообщении: ID, присвоенный СМЭВ, дата приёма по часам СМЭВ, результат маршрутизации, etc.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="SMEVSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-СМЭВ. Подписан элемент //MessageMetadata.
                            Подпись оставлена необязательной, чтобы клиентов можно было тестировать с упрощёнными эмуляторами СМЭВ.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetStatusRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "получить сообщение из моей входящей очереди запросов, если очередь не пуста".
                Какую входящую очередь смотреть - определаятся по владельцу сертификата, входящего в состав ЭЦП,
                и селектору типа запроса.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="basic:Timestamp"/>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //Id.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetStatusResponse">
    <xs:annotation>
      <xs:documentation>Возвращаемая структура метода "получить сообщение из моей входящей очереди запросов, если очередь не пуста".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:SmevAsyncProcessingMessage" minOccurs="0">
          <xs:annotation></xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SmevAsyncProcessingMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об статусе асинхронной обработки в СМЭВ.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="1" maxOccurs="1">
          <xs:element ref="tns:AsyncProcessingStatusData"/>
        </xs:choice>
        <xs:element name="SMEVSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-СМЭВ. Подписан элемент preceding-sibling:</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetRequestRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "получить сообщение из моей входящей очереди запросов, если очередь не пуста".
                Какую входящую очередь смотреть - определаятся по владельцу сертификата, входящего в состав ЭЦП,
                и селектору типа запроса.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="basic:MessageTypeSelector">
          <xs:annotation>
            <xs:documentation>См. описание {urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2}MessageTypeSelector</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //MessageTypeSelector.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetResponseRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "получить сообщение из моей входящей очереди ответов, если очередь не пуста".
                Какую входящую очередь смотреть - определаятся по владельцу сертификата, входящего в состав ЭЦП,
                и селектору типа _ответа_.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="basic:MessageTypeSelector">
          <xs:annotation>
            <xs:documentation>См. описание {urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2}MessageTypeSelector</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //MessageTypeSelector.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetRequestResponse">
    <xs:annotation>
      <xs:documentation>Возвращаемая структура метода "получить сообщение из моей входящей очереди запросов, если очередь не пуста".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="RequestMessage" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Полученное сообщение. Если этот элемент отсутствует, это значит, что входящая очередь пуста.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:choice>
                <xs:sequence>
                  <xs:element ref="tns:Request"/>
                  <xs:element ref="basic:AttachmentContentList" minOccurs="0"/>
                </xs:sequence>
                <xs:element ref="tns:Cancel"/>
              </xs:choice>
              <xs:element name="SMEVSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>ЭП-СМЭВ. Подписан элемент //Request, либо //Cancel</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetResponseResponse">
    <xs:annotation>
      <xs:documentation>Возвращаемая структура метода "получить сообщение из моей входящей очереди, если очередь не пуста".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0">
        <xs:annotation>
          <xs:documentation>Если у GetResponseResponse нет child element, это значит, что входящая очередь пуста.</xs:documentation>
        </xs:annotation>
        <xs:element name="ResponseMessage">
          <xs:annotation>
            <xs:documentation>Ответ, присланный поставщиком данных.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="tns:Response"/>
              <xs:element ref="basic:AttachmentContentList" minOccurs="0"/>
              <xs:element name="SMEVSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>ЭП-СМЭВ. Подписан элемент preceding-sibling::tns:Response</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="AsyncProcessingStatus">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="OriginalMessageId" type="basic:UUID"/>
        <xs:element name="StatusCategory" type="basic:InteractionStatusType">
          <xs:annotation>
            <xs:documentation>Категория статуса.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="StatusDetails" type="basic:string-500" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Описание процессинга в человекочитаемом виде.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="SmevFault" type="basic:SmevFault" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AsyncProcessingStatusData">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:AsyncProcessingStatus"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="AckRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "Подтверждение получения сообщения".</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="basic:AckTargetMessage"/>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент preceding-sibling::basic:AckTargetMessage.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AckResponse" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Возвращаемое значение метода "Подтверждение получения сообщения".</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="GetIncomingQueueStatisticsRequest">
    <xs:annotation>
      <xs:documentation>Параметры метода "получить статистику входящей очереди".
                Какую входящую очередь смотреть - определаятся по владельцу сертификата, входящего в состав ЭЦП.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="NodeID" type="basic:string-50" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Идентификатор нода.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:Timestamp"/>
        <xs:element name="CallerInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ. Подписан элемент //СurrentTimestamp.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetIncomingQueueStatisticsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="QueueStatistics" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="queueName" type="basic:string-200"/>
            <xs:attribute name="pendingMessageNumber" type="xs:long"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SenderProvidedRequestData">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MessageID" type="basic:UUID">
          <xs:annotation>
            <xs:documentation>Идентификатор, присвоенный сообщению отправителем.
                            Генерируется в соответствии с RFC-4122, по варианту 1 (на основании MAC-адреса и текущего времени).</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="TransactionCode" type="basic:string-1500">
          <xs:annotation>
            <xs:documentation>Идентификатор кода транзакции.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="NodeID" type="basic:string-50" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Идентификатор нода отправителя.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="EOL" type="xs:dateTime" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Ограничение жизни сообщения.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:MessagePrimaryContent">
          <xs:annotation>
            <xs:documentation>Содержательная часть запроса, XML-документ.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="PersonalSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-СП содержательной части запроса.
                            Подписывается элемент, находящийся сразу под MessagePrimaryContent.
                            Хотя этот элемент не обязателен, поставщик данных может потребовать,
                            чтобы в запросах определённых типов ЭП-СП всегда была.
                            Это вызвано тем, что в ряде случаев, согласно ФЗ, сведения могут предоставляться только по запросам
                            должностных лиц определённого уровня.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:AttachmentHeaderList" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Заголовки вложенных файлов.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:RefAttachmentHeaderList" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Заголовки файлов по ссылке.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="BusinessProcessMetadata" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Информация о бизнес-процессе, в рамках которого пересылается данное сообщение.
                            Формат данных определяется в отдельной схеме (схемах).
                            На текущий эта информация не обязательна для заполнения отправителем.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="TestMessage" type="basic:Void" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Если этот элемент присутствует, то запрос - тестовый.
                            В этом случае, ИС-поставщик данных должна гарантировать, что её данные не будут изменены
                            в результате выполнения этого запроса.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SenderProvidedResponseData">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MessageID" type="basic:UUID">
          <xs:annotation>
            <xs:documentation>Идентификатор, присвоенный сообщению отправителем.
                            Генерируется в соответствии с RFC-4122, по варианту 1 (на основании MAC-адреса и текущего времени).</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="To" type="basic:string-4000">
          <xs:annotation>
            <xs:documentation>Адрес доставки ответа. Копируется из запроса, //GetRequestResponse/ReplyTo/text()</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:choice>
          <xs:sequence>
            <xs:element ref="basic:MessagePrimaryContent">
              <xs:annotation>
                <xs:documentation>Содержательная часть ответа, XML-документ.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PersonalSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
              <xs:annotation>
                <xs:documentation>ЭП-СП содержательной части ответа. Подписывается элемент, находящийся сразу под MessagePrimaryContent.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element ref="basic:AttachmentHeaderList" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Заголовки вложенных файлов.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element ref="basic:RefAttachmentHeaderList" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Заголовки файлов по ссылке.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:element name="RequestRejected" maxOccurs="unbounded">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="RejectionReasonCode" type="basic:string-10" minOccurs="0">
                  <xs:annotation>
                    <xs:documentation>Код причины отклонения запроса. Специфичен для ИС поставщика данных.</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element name="RejectionReason" type="basic:string-500">
                  <xs:annotation>
                    <xs:documentation>Причина отклонения запроса, в человекочитаемом виде.</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element ref="tns:AsyncProcessingStatus" maxOccurs="1"></xs:element>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Request">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:SenderProvidedRequestData"/>
        <xs:element ref="tns:MessageMetadata">
          <xs:annotation>
            <xs:documentation>Информация об отправителе, дате отправки, маршрутизации сообщения, и другая (см. определение типа).
                            Все данные заполняются СМЭВ.
                            Элемент //MessageMetadata/SendingTimestamp содержит дату и время, начиная с которых отсчитывается срок исполнения запроса.
                            Остальные данные предназначены для целей анализа (машинного и ручного) качества обслуживания
                            информационной системы - получателя сообщения,
                            а также для предоставления службе поддержки оператора СМЭВ в случае необходимости.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="basic:FSAttachmentsList" minOccurs="0"></xs:element>
        <xs:element name="ReplyTo" type="basic:string-4000">
          <xs:annotation>
            <xs:documentation>Аналог обратного адреса; непрозрачный объект, по которому СМЭВ сможет вычислить, кому доставить ответ на этот запрос.
                            При отправке ответа нужно скопировать это значение в //SenderProvidedResponseData/To/text().
                            N.B. Формат обратного адреса не специфицирован, и может меняться со временем.
                            Больше того, в запросах, пришедших от одного и того же отправителя через сколь угодно малый промежуток времени,
                            обратный адрес не обязан быть одним и тем же.
                            Если получатель хочет идентифицировать отправителя, можно использовать либо маршрутную информацию СМЭВ
                            (//GetMessageIfAnyResponse/SMEVRoutingInfo/Sender/*), либо сертификат отправителя
                            (//GetMessageIfAnyResponse/CallerInformationSystemSignature/xmldsig:Signature/...)</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="SenderInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ отправителя. Подписан элемент //SenderProvidedRequestData</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Response">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="OriginalMessageId" type="basic:UUID"/>
        <xs:element name="OriginalTransactionCode" type="basic:string-1500"/>
        <xs:element ref="tns:SenderProvidedResponseData"/>
        <xs:element ref="tns:MessageMetadata"/>
        <xs:element ref="basic:FSAttachmentsList" minOccurs="0"></xs:element>
        <xs:element name="SenderInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ отправителя. Подписан элемент //SenderProvidedResponseData</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Cancel">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="basic:MessageReference">
          <xs:annotation>
            <xs:documentation>Ссылка на запрос, который нужно отменить.
                            Сюда нужно писать ID СМЭВ-сообщения, который был передан при отправке запроса в элементе
                            //SendRequestRequest/SenderProvidedRequestData/MessageID.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MessageID" type="basic:UUID">
          <xs:annotation>
            <xs:documentation>Идентификатор, присвоенный СМЭВ уведомлению об отмене.
                            Генерируется в соответствии с RFC-4122, по варианту 1 (на основании MAC-адреса и текущего времени).</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="tns:MessageMetadata"/>
        <xs:element name="SenderInformationSystemSignature" type="basic:XMLDSigSignatureType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ или ЭП-ПГУ отправителя. Подписан элемент //SenderProvidedCancelData</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="MessageMetadata">
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Маршрутная информация, заполняемая СМЭВ.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="MessageType" type="tns:MessageTypeType"/>
        <xs:element name="Sender">
          <xs:annotation>
            <xs:documentation>Информация об отправителе сообщения.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Mnemonic" type="basic:string-50">
                <xs:annotation>
                  <xs:documentation>Мнемоника отправителя. Для машинной обработки. Вычисляется на основании данных сетрификата.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="HumanReadableName" type="basic:string-500">
                <xs:annotation>
                  <xs:documentation>Наименование отправителя в форме, удобной для восприятия человеком.
                                        Вычисляется на основании данных сертификата.
                                        Не обязано полностью совпадать с официальным названием организации или органа власти.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="SendingTimestamp" type="xs:dateTime">
          <xs:annotation>
            <xs:documentation>Дата и время отправки сообщения в СМЭВ.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MessageBroker" type="basic:string-200"/>
        <xs:element name="DestinationName" type="basic:string-500"/>
        <xs:element name="Recipient" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Получатель сообщения (вычислен маршрутизатором).
                            Для широковещательных сообщений не заполняется.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Mnemonic" type="basic:string-100">
                <xs:annotation>
                  <xs:documentation>Мнемоника. Для машинной обработки.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="HumanReadableName" type="basic:string-500">
                <xs:annotation>
                  <xs:documentation>Наименование в форме, удобной для восприятия человеком.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="SupplementaryData">
          <xs:annotation>
            <xs:documentation>Дополнительная информация о сообщении.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="DetectedContentTypeName" type="basic:string-500" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Тип сообщения. Вычисляется СМЭВ на основании полного имени (qualified name) корневого XML-элемента сообщения.
                                        Например, "Заявка на получение выписки из ЕГРИП".
                                        Для ответов на запросы этот элемент опускается.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="InteractionType" type="basic:InteractionTypeType">
                <xs:annotation>
                  <xs:documentation>Тип взаимодействия, например, портал госуслуг - ОИВ.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="DeliveryTimestamp" type="xs:dateTime" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Дата и время доставки сообщения, по часам СМЭВ.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Status" type="basic:InteractionStatusType" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="MessageTypeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="REQUEST"/>
      <xs:enumeration value="BROADCAST"/>
      <xs:enumeration value="RESPONSE"/>
      <xs:enumeration value="CANCEL"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.215.0.64:7500/ws?xsd=1</con:url><con:content><![CDATA[<!--Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.2.8 svn-revision#13980.-->
<xs:schema targetNamespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" elementFormDefault="qualified" attributeFormDefault="unqualified" jxb:version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:jxb="http://java.sun.com/xml/ns/jaxb">
  <xs:annotation>
    <xs:documentation>Базовые типы.</xs:documentation>
    <xs:appinfo>
      <jxb:schemaBindings>
        <!--Напишите здесь имя пакета, в который должны попасть классы, сгенерированные из этой схемы с помощью wsimport (для JAX-WS)-->
        <jxb:package name="ru.it.smev.message_exchange.autogenerated.types.basic.v1_2"/>
      </jxb:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="MessagePrimaryContent">
    <xs:annotation>
      <xs:documentation>Содержательная часть сообщения СМЭВ.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:any namespace="##other" processContents="skip">
          <xs:annotation>
            <xs:documentation>Корневой элемент XML-документа запроса присоединять сюда.</xs:documentation>
          </xs:annotation>
        </xs:any>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AttachmentHeaderList">
    <xs:annotation>
      <xs:documentation>Заголовки файлов, приложенных к СМЭВ-сообщению.
                Заголовки отделены от содержимого вложений.
                Это нужно потому, что заголовки должны попадать под ЭП-ОВ,
                а содержимое - должно не попадать (иначе не будет работать MTOM).</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="AttachmentHeader" type="tns:AttachmentHeaderType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="AttachmentHeaderType">
    <xs:annotation>
      <xs:documentation>Файл, приложенный к СМЭВ-сообщению.
                Имя файла не передаётся; вложения идентифицируются только идентификаторами внутри сообщения.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="contentId" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор вложения. Ссылка на соответствующий //AttachmentContent/@Id</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MimeType" type="tns:RFC2046MimeTypesType">
        <xs:annotation>
          <xs:documentation>Тип контента.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SignaturePKCS7" type="xs:base64Binary" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ЭЦП в формате PKCS#7 detached. Подписывать ключом ЭП-СП.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AttachmentContentList">
    <xs:annotation>
      <xs:documentation>Cодержимое вложенных файлов.
                У элемента списка, тип base64Binary и наличие атрибута expectedContentTypes - подсказка для frameworks типа JAX-WS передавать содержимое этого элемента по MTOM протоколу.
                Кроме того, значение expectedContentTypes="application/octet-stream" - подсказка JAX-WS дать доступ к этому элементу через InputStream/OutputStream.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="AttachmentContent" type="tns:AttachmentContentType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="FSAttachmentsList">
    <xs:annotation></xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="FSAttachment" type="tns:FSAuthInfo" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="FSAuthInfo">
    <xs:sequence>
      <xs:element name="uuid" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор файла. Ссылка на соответствующий файл.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Пользователь.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Password" type="xs:string">
        <xs:annotation>
          <xs:documentation>Пароль.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="FileName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя файла.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AttachmentContentType">
    <xs:annotation>
      <xs:documentation>Содержимое вложенного файла.
                Значение атрибута attachmentId должно быть уникально среди всех элементов и атрибутов СМЭВ-сообщения, имеющих тип xs:ID.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Id" type="xs:ID"/>
      <xs:element name="Content" type="xs:base64Binary" xmime:expectedContentTypes="application/octet-stream"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="RefAttachmentHeaderList">
    <xs:annotation>
      <xs:documentation>Заголовки файлов, приложенных к СМЭВ-сообщению.
                Заголовки отделены от содержимого вложений.
                Это нужно потому, что заголовки должны попадать под ЭП-ОВ,
                а содержимое - должно не попадать (иначе не будет работать MTOM).</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="RefAttachmentHeader" type="tns:RefAttachmentHeaderType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="RefAttachmentHeaderType">
    <xs:annotation>
      <xs:documentation>Ссылка на файл, приложенный к СМЭВ-сообщению.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="uuid" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор файла. Ссылка на соответствующий файл.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Hash" type="xs:string">
        <xs:annotation>
          <xs:documentation>Хэш файла.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MimeType" type="tns:RFC2046MimeTypesType">
        <xs:annotation>
          <xs:documentation>Тип контента.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SignaturePKCS7" type="xs:base64Binary" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ЭЦП в формате PKCS#7 detached. Подписывать ключом ЭП-СП.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="UUID">
    <xs:annotation>
      <xs:documentation>Строковое представление UUID.
                В СМЭВ UUID используются в качестве идентификаторов сообщений.
                Идентификаторы присваиваются сообщеням отправителями.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="MessageReference">
    <xs:annotation>
      <xs:documentation>Тип для подписанных ссылок на сообщения СМЭВ.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="tns:UUID">
          <xs:attribute name="Id" type="xs:ID"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="AckTargetMessage">
    <xs:annotation>
      <xs:documentation>Ссылка на сообщение, получение которого подтверждается методом Ack.
                Сюда нужно писать Id СМЭВ-сообщения, который берётся
                из //GetRequestResponse/.../SenderProvidedRequestData/MessageID/text() либо
                из //GetResponseResponse/.../SenderProvidedRequestData/MessageID/text().</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="tns:UUID">
          <xs:attribute name="Id" type="xs:ID" use="required"/>
          <xs:attribute name="accepted" type="xs:boolean" use="required">
            <xs:annotation>
              <xs:documentation>true, если ЭП-СМЭВ прошла валидацию и сообщение передано ИС. false, если ЭП-СМЭВ отвергнута, и сообщение проигнорировано.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="XMLDSigSignatureType">
    <xs:annotation>
      <xs:documentation>Элекронная подпись в формате XMLDSig.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:any namespace="http://www.w3.org/2000/09/xmldsig#" processContents="skip">
        <xs:annotation>
          <xs:documentation>Собственно подпись, по спецификации XMLDSig.
                        Объявлена как any для того, чтобы инструменты типа JAXB не генерировали классов для пространства имён
                        http://www.w3.org/2000/09/xmldsig#.
                        Это, в свою очередь, нужно потому, что инструменты, генерирующие и проверяющие ЭЦП (напр. Apache Santuario)
                        работают с DOM-деревьями, а не с JAXB-объектами.</xs:documentation>
        </xs:annotation>
      </xs:any>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="RFC2046MimeTypesType">
    <xs:annotation>
      <xs:documentation>Типы вложений, в формате RFC-2046.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(text|image|audio|video|application)/[a-zA-Z0-9\-+.]*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="MessageTypeSelector">
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>Селектор, с помощью которого при приёме запроса или ответа
                    можно задать фильтр по типу запроса (ответа).
                    Поскольку тип запроса или ответа однозначно определяется полным именем
                    корневого XML-элемента его бизнес-данных,
                    селектор представляет из себя структуру для задания этого имени.
                    Если селектор пуст, это значит, что нужно принять запрос (ответ)
                    без фильтрации по типам.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:sequence minOccurs="0">
          <xs:element name="NamespaceURI" type="xs:anyURI"/>
          <xs:element name="RootElementLocalName" type="xs:NCName"/>
        </xs:sequence>
        <xs:element name="Timestamp" type="xs:dateTime">
          <xs:annotation>
            <xs:documentation>Текущая дата и время.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="NodeID" type="tns:string-50" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Идентификатор нода.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="InteractionStatusType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="doesNotExist">
        <xs:annotation>
          <xs:documentation>Запрос с таким Id не найден в БД СМЭВ.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="requestIsQueued">
        <xs:annotation>
          <xs:documentation>Запрос находится в очереди на асинхронную валидацию.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="requestIsAcceptedBySmev">
        <xs:annotation>
          <xs:documentation>Запрос доставляется поставщику.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="requestIsRejectedBySmev">
        <xs:annotation>
          <xs:documentation>Запрос не прошёл асинхронную валидацию.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="underProcessing">
        <xs:annotation>
          <xs:documentation>Обрабатывается поставщиком сервиса.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="responseIsAcceptedBySmev">
        <xs:annotation>
          <xs:documentation>Запрос выполнен или отвергнут поставщиком сервиса; ответ находится в очереди СМЭВ.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="cancelled">
        <xs:annotation>
          <xs:documentation>Запрос отменён потребителем сервиса.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="responseIsDelivered">
        <xs:annotation>
          <xs:documentation>Ответ получен потребителем сервиса.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="InteractionTypeType">
    <xs:annotation>
      <xs:documentation>Тип взаимодействия</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="PGU2OIV">
        <xs:annotation>
          <xs:documentation>Взаимодействие портала государственных и/или муниципальных услуг с органом власти.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="OIV2OIV">
        <xs:annotation>
          <xs:documentation>Взаимодействие между органами власти.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="OIV2sameOIV">
        <xs:annotation>
          <xs:documentation>Взаимодействие между различными информационными системами одного органа исполнительной власти через СМЭВ.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Charger2PaymentGate">
        <xs:annotation>
          <xs:documentation>Взаимодействие информационно-платежного шлюза с поставщиками начислений для оплаты услуг в электронном виде.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PaymentGate2Treasury">
        <xs:annotation>
          <xs:documentation>Взаимодействие информационно-платежного шлюза с системой УНИФО ФК для получения начислений и фактов оплаты для пользователей ПГУ.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="OIV2Treasury">
        <xs:annotation>
          <xs:documentation>Взаимодействие ОИВ с системой УНИФО ФК для передачи начислений и получения фактов оплаты.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="other">
        <xs:annotation>
          <xs:documentation>Другие типы взаимодействия.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NotDetected">
        <xs:annotation>
          <xs:documentation>Не удалось определить тип взаимодействия.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="Timestamp">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:dateTime">
          <xs:attribute name="Id" type="xs:ID"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="string-10">
    <xs:restriction base="xs:string">
      <xs:maxLength value="10"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-50">
    <xs:restriction base="xs:string">
      <xs:maxLength value="50"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-100">
    <xs:restriction base="xs:string">
      <xs:maxLength value="100"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-200">
    <xs:restriction base="xs:string">
      <xs:maxLength value="200"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-500">
    <xs:restriction base="xs:string">
      <xs:maxLength value="500"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-1500">
    <xs:restriction base="xs:string">
      <xs:maxLength value="1500"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="string-4000">
    <xs:restriction base="xs:string">
      <xs:maxLength value="4000"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Void">
    <xs:annotation>
      <xs:documentation>Тип элемента, который передаёт информацию фактом своего наличия.</xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:complexType name="SmevFault">
    <xs:complexContent>
      <xs:extension base="tns:Void">
        <xs:sequence>
          <xs:element name="Code" type="tns:string-50" minOccurs="0"/>
          <xs:element name="Description" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.215.0.64:7500/ws?xsd=2</con:url><con:content><![CDATA[<!--Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.2.8 svn-revision#13980.-->
<xs:schema targetNamespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2" elementFormDefault="qualified" attributeFormDefault="unqualified" jxb:version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2" xmlns:basic="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:jxb="http://java.sun.com/xml/ns/jaxb">
  <xs:annotation>
    <xs:documentation>Определения элементов, используемых в качестве SOAP fault-сообщений.</xs:documentation>
    <xs:appinfo>
      <jxb:schemaBindings>
        <!--Напишите здесь имя пакета, в который должны попасть классы, сгенерированные из этой схемы с помощью ws import-->
        <jxb:package name="ru.it.smev.message_exchange.autogenerated.types.fault.v1_2"/>
      </jxb:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  <xs:import namespace="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" schemaLocation="http://10.215.0.64:7500/ws?xsd=1"/>
  <xs:element name="BusinessDataTypeIsNotSupported" type="tns:BusinessDataTypeIsNotSupported">
    <xs:annotation>
      <xs:documentation>Запрос с таким полным именем корневого элемента не поддерживается данной ИС.
				Вероятная причина: неверная настройка маршрутизации в СМЭВ.
				Действия СМЭВ: Сообщение будет направлено персоналу техподдержки СМЭВ для разбирательства.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BusinessDataTypeIsNotSupported">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="RootElementLocalName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Local name корневого элемента содержательной части запроса.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="RootElementNamespaceURI" type="xs:string">
            <xs:annotation>
              <xs:documentation>Namespace URI корневого элемента содержательной части запроса.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="InvalidContent" type="tns:InvalidContent">
    <xs:annotation>
      <xs:documentation>
        Содержательная часть сообщения (например, в случае запроса - //AcceptRequestRequest/PrimaryContent/element()) 
				не прошла валидацию по XSD, заявленной для типа запроса.
				Действия СМЭВ: Сообщение будет направлено персоналу техподдержки для разбирательства.
				N.B. Сообщения могут отвергаться этим способом
        <b>только</b>
        по результатам валидации по XML-схеме.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="InvalidContent">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="ValidationError" minOccurs="1" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Сообщение об ошибке валидации. Текстовое содержимое элемента должно содержать сообщение об ошибке, возвращённое валидатором.</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:simpleContent>
                <xs:extension base="xs:string">
                  <xs:attribute name="errorPosition" type="xs:int" use="required">
                    <xs:annotation>
                      <xs:documentation>Позиция в XML-документе, в которой валидатор обнаружил ошибку.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:extension>
              </xs:simpleContent>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UnknownMessageType" type="basic:Void">
    <xs:annotation>
      <xs:documentation>a) При попытке выбрать ответ, указан тип сообщения, не зарегистрированный в СМЭВ 
					(тип сообщения состоит из /GetResponseRequest/MessageTypeSelector/NamespaceURI и /GetResponseRequest/MessageTypeSelector/RootElementLocalName)
				b) При попытке выбрать запрос, указан тип сообщения, либо не зарегистрированный в СМЭВ, либо не принадлежащий текущему клиенту.
				Действия клиента: Уточнить тип сообщения, повторить запрос.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="TransactionCodeInvalid" type="basic:SmevFault">
    <xs:annotation>
      <xs:documentation>a) При попытке выбрать ответ, указан тип сообщения, не зарегистрированный в СМЭВ
                (тип сообщения состоит из /GetResponseRequest/MessageTypeSelector/NamespaceURI и /GetResponseRequest/MessageTypeSelector/RootElementLocalName)
                b) При попытке выбрать запрос, указан тип сообщения, либо не зарегистрированный в СМЭВ, либо не принадлежащий текущему клиенту.
                Действия клиента: Уточнить тип сообщения, повторить запрос.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="MessageIsAlreadySent" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Сообщение с таким MessageID уже было отправлено ранее.
				Возможно в следующих ситуациях:
				a) Клиент пытался отправить сообщение, отправка прошла успешно, но в конце взаимодействия HTTP соединение оборвалось, 
					и клиент не получил ответ от СМЭВ об успешной отправке. 
					При повторной попытке отправить сообщение клиент получит этот fault. 
					В этой ситуации нужно прекратить пытаться повторно послать сообщение.
				b) Клиент использует алгоритм генерации ID сообщений, не соответствующий МР.
				c) Клиент пытается послать несколько сообщений, используя один и тот же ID.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="InvalidMessageIdFormat" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Идентификатор, присвоенный сообщению отправителем, не является корректным строковым представлением UUID, вариант 1 (см. RFC-4122).</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="StaleMessageId" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Идентификатор (UUID), присвоенный сообщению отправителем, содержит старый timestamp. 
				Возможно в следующих случаях:
				a) в системе отправителя неверно установлено время. 
					Действия клиента: установить в операционной системе реальное время.
				b) в результате очень плохого качества связи, сообщение пытаются отправить в течение двух суток или более.
					Действия клиента: сгенерировать новый UUID, присвоить его сообщению, отправить сообщение.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="AttachmentContentMiscoordination" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Содержимое элемента //AttachmentHeaderList не соответствует содержимому элемента //AttachmentContentList.
				Возможные ошибки: 
					разное количество элементов в списках;
					существует элемент //AttachmentHeaderList/AttachmentHeader, у которого атрибут contentId не ссылается либо в никуда, 
						либо на элемент, отличный от //AttachmentContentList/AttachmentContent.
				N.B. Порядок подэлементов //AttachmentHeaderList не обязан соответствовать порядку подэлементов //AttachmentContentList.
				Действия СМЭВ: сообщение отброшено.
				Действия клиента: Должно быть сформировано новое сообщение, с корректной координацией между заголовками и содержимим вложений.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="AttachmentSizeLimitExceeded" type="tns:AttachmentSizeLimitExceeded">
    <xs:annotation>
      <xs:documentation>Суммарный размер вложений превысил предел, установленный правилами СМЭВ. 
				Действия СМЭВ: сообщение отброшено.
				Действия клиента: приложенные файлы должны быть уменьшены в размере (например, путём увеличения уровня сжатия JPEG).
					Должно быть сформировано новое сообщение, в котором суммарный размер вложений находится в допустимых пределах.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AttachmentSizeLimitExceeded">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="PermittedTotalAttachmentSize" type="xs:long">
            <xs:annotation>
              <xs:documentation>Максимальный суммарный размер вложений, разрешённый для передачи в одном СМЭВ-сообщении, в байтах.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="RealTotalAttachmentSize" type="xs:long">
            <xs:annotation>
              <xs:documentation>Суммарные размер вложений, переданных в отвергнутом сообщении, в байтах.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuoteLimitExceeded" type="tns:QuoteLimitExceeded">
    <xs:annotation>
      <xs:documentation>Суммарный размер вложений превысил размер оставшейся квоты, установленный правилами СМЭВ.
                Действия СМЭВ: сообщение отброшено.
                Действия клиента: Освобождение квоты.
                После освобождения квоты должно быть переотправлено новое сообщение, в котором суммарный размер вложений находится в допустимых для квоты пределах.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuoteLimitExceeded">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="RemainedTotalQuoteSize" type="xs:long">
            <xs:annotation>
              <xs:documentation>Текущее значение оставшейся квоты для СМЭВ-сообщении, в байтах.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="RealTotalAttachmentSize" type="xs:long">
            <xs:annotation>
              <xs:documentation>Суммарные размер вложений, переданных в отвергнутом сообщении, в байтах.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AccessDenied" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Данному отправителю не разрешена посылка сообщений данному получателю.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="SignatureVerificationFault" type="tns:SignatureVerificationFault">
    <xs:annotation>
      <xs:documentation>ЭП-ОВ не прошла проверку.
				Действия клиента зависят от кода ошибки верификации.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SignatureVerificationFault">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="SignatureVerificationFault">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="PoorSOAPEnvelopeFormat">
                  <xs:annotation>
                    <xs:documentation>Недопустимый формат SOAP-конверта: отсутствует soap:Header.
                                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="NoSignatureFound">
                  <xs:annotation>
                    <xs:documentation>ЭП-ОВ не найдена в документе.
                                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="IncorrectSignatureTarget">
                  <xs:annotation>
                    <xs:documentation>ЭП-ОВ подписывает не ту часть СМЭВ-сообщения, которую требуется подписать по спецификации СМЭВ.
                                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="SignatureIsInvalid">
                  <xs:annotation>
                    <xs:documentation>Некорректная структура XMLDSig, либо подписанный фрагмент XML-фрагмент не соответствует значению ЭП-ОВ.
                                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="CertificateIsNotFound">
                  <xs:annotation>
                    <xs:documentation>Не удалось найти сертификат клиента в ЕСИА.
                                            Действия клиента: обратиться в службу поддержки оператора СМЭВ.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="CertificateIsExpired">
                  <xs:annotation>
                    <xs:documentation>Срок действия сертификата клиента истёк.
                                            Действия клиента: обратиться в удостоверяющий центр за новым сертификатом.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SignatureVerificationFaultOld">
    <xs:annotation>
      <xs:documentation>ЭП-ОВ не прошла проверку.
                Действия клиента зависят от кода ошибки верификации.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:enumeration value="PoorSOAPEnvelopeFormat">
          <xs:annotation>
            <xs:documentation>Недопустимый формат SOAP-конверта: отсутствует soap:Header.
                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="NoSignatureFound">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ не найдена в документе.
                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="IncorrectSignatureTarget">
          <xs:annotation>
            <xs:documentation>ЭП-ОВ подписывает не ту часть СМЭВ-сообщения, которую требуется подписать по спецификации СМЭВ.
                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="SignatureIsInvalid">
          <xs:annotation>
            <xs:documentation>Некорректная структура XMLDSig, либо подписанный фрагмент XML-фрагмент не соответствует значению ЭП-ОВ.
                            Действия клиента: исправить ошибки в коде своей ИС.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="CertificateIsNotFound">
          <xs:annotation>
            <xs:documentation>Не удалось найти сертификат клиента в ЕСИА.
                            Действия клиента: обратиться в службу поддержки оператора СМЭВ.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
        <xs:enumeration value="CertificateIsExpired">
          <xs:annotation>
            <xs:documentation>Срок действия сертификата клиента истёк.
                            Действия клиента: обратиться в удостоверяющий центр за новым сертификатом.</xs:documentation>
          </xs:annotation>
        </xs:enumeration>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <xs:element name="SMEVFailure" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Сообщение невозможно принять по причине сбоя в инфраструктуре СМЭВ.
				Действия клиента: должны предприниматься повторные попытки доставить сообщение, без ограничения количества попыток.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="IncorrectResponseContentType" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Содержимое посылается через метод SendResponse, 
				но, согласно реестру типов запросов СМЭВ, содержательная часть сообщения
				представляет из себя запрос или заявку, а не ответ.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="RecipientIsNotFound" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Содержимое посылается через метод SendResponse, 
				но значение //SendResponseRequest/To/text(), по данным СМЭВ,
				не соотевтствует никакому получателю.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="SenderIsNotRegistered" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Отправитель не зарегистрирован в СМЭВ.
				Ошибка может также вызываться неправильной настройкой СМЭВ, 
				а также сменой X-400 имени организации при получении нового сертификата,
				используемого для подписания ЭП-ОВ.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="RequestIsNotFound" type="basic:Void">
    <xs:annotation>
      <xs:documentation>При попытке отменить запрос, СМЭВ не находит в своём журнале
				данных этого запроса.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="TargetMessageIsNotFound" type="basic:Void">
    <xs:annotation>
      <xs:documentation>При попытке подтвердить получение сообщения, СМЭВ не находит неподтверждённого сообщения с таким ID.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="DestinationOverflow" type="tns:DestinationOverflow">
    <xs:annotation>
      <xs:documentation>Входящая очередь получателя переполнена.
				Обратиться в службу техподдержки СМЭВ, продолжать посылать сообщение.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DestinationOverflow">
    <xs:complexContent>
      <xs:extension base="basic:SmevFault">
        <xs:sequence>
          <xs:element name="MessageBrokerAddress" type="xs:string"/>
          <xs:element name="DestinationName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="EndOfLifeReached" type="basic:Void">
    <xs:annotation>
      <xs:documentation>Превышено время жизни сообщения (end of life).
                Действия клиента: должны предприниматься повторные попытки доставить сообщение,
                возможно с увеличенным временем жизни.</xs:documentation>
    </xs:annotation>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:Ack" name="Ack" bindingOperationName="Ack" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="a22a7f5b-6e22-43b4-a54e-b33fc74a1f0d"><con:settings/><con:call name="Request 1" id="d8767fa6-669d-4864-83b1-850a614d2164"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.0.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.0.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         <ns1:AckTargetMessage Id="?" accepted="?">?</ns1:AckTargetMessage>
         <!--Optional:-->
         <ns:CallerInformationSystemSignature>
            <!--You may enter ANY elements at this point-->
         </ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:Ack"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="urn:GetIncomingQueueStatistics" name="GetIncomingQueueStatistics" bindingOperationName="GetIncomingQueueStatistics" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="435b4ad8-61dc-4c1b-b362-4233bc7b7368"><con:settings/><con:call name="Request 1" id="eca9d504-149d-4e36-9ebc-bc9c94eb54ae"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.0.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.0.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:GetIncomingQueueStatisticsRequest>
         <ns1:Timestamp Id="?">?</ns1:Timestamp>
         <!--Optional:-->
         <ns:CallerInformationSystemSignature>
            <!--You may enter ANY elements at this point-->
         </ns:CallerInformationSystemSignature>
      </ns:GetIncomingQueueStatisticsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:GetIncomingQueueStatistics"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="urn:GetRequest" name="GetRequest" bindingOperationName="GetRequest" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="e6f6871a-35ba-4cc5-abd0-ac26dd3f8947"><con:settings/><con:call name="Request 1" id="49323d86-3664-4f89-b2c5-e9503359e117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         <ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" Id="SIGNED_BY_CALLER"><ns2:NamespaceURI>urn://x-artefacts-nov2/external/requests/1.0</ns2:NamespaceURI><ns2:RootElementLocalName>DataRequest</ns2:RootElementLocalName><ns2:Timestamp>2014-02-11T17:10:03.616+04:00</ns2:Timestamp></ns2:MessageTypeSelector>
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>XdQXI4SsMJsRDuFA95n0BT1U7ull3m6wmoRmWT0W/Io=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>9n/nhT2lqtNHrwqaW1XmHxld25ya9zj2uRTde5OoGJM7s1iG68/T20kv5Zkhz7mPDHXKcJ8gzPn/jZfX9NpX0Q==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature></ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:GetRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="urn:GetResponse" name="GetResponse" bindingOperationName="GetResponse" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="bd9a0ee6-9970-44a9-8de4-116d5556592d"><con:settings/><con:call name="Request 1" id="a7dc0ad9-514e-458d-b1ff-fa0c2f92e064"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.0.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.0.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:GetResponseRequest>
         <ns1:MessageTypeSelector Id="?">
            <ns1:NamespaceURI>?</ns1:NamespaceURI>
            <ns1:RootElementLocalName>?</ns1:RootElementLocalName>
            <ns1:Timestamp>?</ns1:Timestamp>
         </ns1:MessageTypeSelector>
         <!--Optional:-->
         <ns:CallerInformationSystemSignature>
            <!--You may enter ANY elements at this point-->
         </ns:CallerInformationSystemSignature>
      </ns:GetResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:GetResponse"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="urn:SendRequest" name="SendRequest" bindingOperationName="SendRequest" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ade98206-812d-4664-956c-1502d19ce7ee"><con:settings/><con:call name="Request 1" id="5abc527f-1103-4cfa-b1fc-a5e0a79747a7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.215.0.92:7500/ws?wsdl</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         <ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>1de7bfa1-34ff-11e5-ba68-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>1de7bfa1-34ff-11e5-ba68-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:BreachRequest xmlns:ns1="urn://x-artefacts-gibdd-gov-ru/breach/root/1.0"  xmlns:ns2="urn://x-artefacts-gibdd-gov-ru/breach/commons/1.0"  xmlns:ns3="urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1" Id="PERSONAL_SIGNATURE"> <ns1:RequestedInformation> <ns2:RegPointNum>Т785ЕС57</ns2:RegPointNum> </ns1:RequestedInformation> <ns1:Governance> <ns2:Name>ГИБДД РФ</ns2:Name> <ns2:Code>GIBDD</ns2:Code> <ns2:OfficialPerson> <ns3:FamilyName>Загурский</ns3:FamilyName> <ns3:FirstName>Андрей</ns3:FirstName> <ns3:Patronymic>Петрович</ns3:Patronymic> </ns2:OfficialPerson></ns1:Governance> </ns1:BreachRequest> </ns2:MessagePrimaryContent></ns:SenderProvidedRequestData>
         <ns2:CallerInformationSystemSignature><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>k0trovf756NIbTPGYs1LqW2uZyZMDjFWnSHvA2Wc7QA=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>lnm34gn5COaf8QubsdZeh24u4d61RaeWnSbQP+qN81yM8zEX58ZRsWmnbs7r/jo2XQHnMoeZZMd3o7BFMkOx+A==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIBcDCCAR2gAwIBAgIEHVmVKDAKBgYqhQMCAgMFADAtMRAwDgYDVQQLEwdTWVNURU0xMQwwCgYDVQQKEwNJUzIxCzAJBgNVBAYTAlJVMB4XDTE1MDUwNzEyMTUzMFoXDTE4MDUwNjEyMTUzMFowLTEQMA4GA1UECxMHU1lTVEVNMTEMMAoGA1UEChMDSVMyMQswCQYDVQQGEwJSVTBjMBwGBiqFAwICEzASBgcqhQMCAiMBBgcqhQMCAh4BA0MABEDoWGZlTUWD43G1N7TEm14+QyXrJWProrzoDoCJRem169q4bezFOUODcNooQJNg3PtAizkWeFcX4b93u8fpVy7RoyEwHzAdBgNVHQ4EFgQUaRG++MAcPZvK/E2vR1BBl5G7s5EwCgYGKoUDAgIDBQADQQCg25vA3RJL3kgcJhVOHA86vnkMAtZYr6HBPa7LpEo0HJrbBF0ygKk50app1lzPdZ5TtK2itfmNgTYiuQHX3+nE</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature></ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:attachment><con:name>data 300KB.txt</con:name><con:contentType>text/plain</con:contentType><con:contentId>data 300KB.txt</con:contentId><con:url>C:/projects/qa/smev/utils/signService/data/files/data300KB.txt</con:url><con:id>2581eee8-b429-40f8-88fa-3e4fb27d95b7</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:SendRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="urn:SendResponse" name="SendResponse" bindingOperationName="SendResponse" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d6614d62-33af-4b27-9308-2944d5198b14"><con:settings/><con:call name="Request 1" id="100bc8a1-2fdb-49ca-8847-2f24ec9971fe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         <ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER">
            <ns:To>8001|x-artefacts-nov2_external_requests|SMEV-MSG_localhost.localdomain_1394131452361_51</ns:To>
            <ns1:MessagePrimaryContent>
               <ns1:DataResponse xmlns:ns1="urn://x-artefacts-nov2/external/requests/1.0">
                  <ns1:Response>8888</ns1:Response>
               </ns1:DataResponse>
            </ns1:MessagePrimaryContent>
            <RequestRejected>
               <RejectionReasonCode>1234</RejectionReasonCode>
               <RejectionReason>412</RejectionReason>
            </RequestRejected>
         </ns:SenderProvidedResponseData>
         <ns:CallerInformationSystemSignature>
            <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
               <ds:SignedInfo>
                  <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                  <ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/>
                  <ds:Reference URI="#SIGNED_BY_PROVIDER">
                     <ds:Transforms>
                        <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                        <ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/>
                     </ds:Transforms>
                     <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/>
                     <ds:DigestValue>McFWyTX5OkefpGl9RI0vkUVJnVX7qW1+Q3GI08KhvCs=</ds:DigestValue>
                  </ds:Reference>
               </ds:SignedInfo>
               <ds:SignatureValue>sPId3d1/gqeqtdZbROZPQVV0ECfPCDWr+UgxMHCN0OnTEZeTYL0/om8h5bMN8YZva5m7FeGhJ4TNYXkbAki1eA==</ds:SignatureValue>
               <ds:KeyInfo>
                  <ds:X509Data>
                     <ds:X509Certificate>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</ds:X509Certificate>
                  </ds:X509Data>
               </ds:KeyInfo>
            </ds:Signature>
         </ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:SendResponse"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="e074efc8-6cab-4e38-aab1-6ebb11285bb7"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.0.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.0.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         <ns:SenderProvidedResponseData Id="?">
            <ns:To>?</ns:To>
            <!--You have a CHOICE of the next 2 items at this level-->
            <ns1:MessagePrimaryContent>
               <!--You may enter ANY elements at this point-->
            </ns1:MessagePrimaryContent>
            <!--Optional:-->
            <ns:PersonalSignature>
               <!--You may enter ANY elements at this point-->
            </ns:PersonalSignature>
            <!--Optional:-->
            <ns1:AttachmentHeaderList>
               <!--1 or more repetitions:-->
               <ns1:AttachmentHeader>
                  <ns1:contentId>?</ns1:contentId>
                  <ns1:MimeType>?</ns1:MimeType>
                  <!--Optional:-->
                  <ns1:SignaturePKCS7>cid:694688359610</ns1:SignaturePKCS7>
               </ns1:AttachmentHeader>
            </ns1:AttachmentHeaderList>
            <!--1 or more repetitions:-->
            <ns:RequestRejected>
               <!--Optional:-->
               <ns:RejectionReasonCode>?</ns:RejectionReasonCode>
               <ns:RejectionReason>?</ns:RejectionReason>
            </ns:RequestRejected>
         </ns:SenderProvidedResponseData>
         <!--Optional:-->
         <ns1:AttachmentContentList>
            <!--1 or more repetitions:-->
            <ns1:AttachmentContent>
               <ns1:Id>?</ns1:Id>
               <ns1:Content>cid:11811002865</ns1:Content>
            </ns1:AttachmentContent>
         </ns1:AttachmentContentList>
         <!--Optional:-->
         <ns:CallerInformationSystemSignature>
            <!--You may enter ANY elements at this point-->
         </ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:SendResponse"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="7e100a53-2a5e-49fc-8a72-601502680607"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.77.102.150:7500/ws</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         <ns:SenderProvidedResponseData Id="?">
            <ns:To>?</ns:To>
            <!--You have a CHOICE of the next 2 items at this level-->
            <ns1:MessagePrimaryContent>
               <!--You may enter ANY elements at this point-->
            </ns1:MessagePrimaryContent>
            <!--Optional:-->
            <ns:PersonalSignature>
               <!--You may enter ANY elements at this point-->
            </ns:PersonalSignature>
            <!--Optional:-->
            <ns1:AttachmentHeaderList>
               <!--1 or more repetitions:-->
               <ns1:AttachmentHeader>
                  <ns1:contentId>?</ns1:contentId>
                  <ns1:MimeType>?</ns1:MimeType>
                  <!--Optional:-->
                  <ns1:SignaturePKCS7>cid:777318363836</ns1:SignaturePKCS7>
               </ns1:AttachmentHeader>
            </ns1:AttachmentHeaderList>
            <!--1 or more repetitions:-->
            <ns:RequestRejected>
               <!--Optional:-->
               <ns:RejectionReasonCode>?</ns:RejectionReasonCode>
               <ns:RejectionReason>?</ns:RejectionReason>
            </ns:RequestRejected>
         </ns:SenderProvidedResponseData>
         <!--Optional:-->
         <ns1:AttachmentContentList>
            <!--1 or more repetitions:-->
            <ns1:AttachmentContent>
               <ns1:Id>?</ns1:Id>
               <ns1:Content>cid:773633184824</ns1:Content>
            </ns1:AttachmentContent>
         </ns1:AttachmentContentList>
         <!--Optional:-->
         <ns:CallerInformationSystemSignature>
            <!--You may enter ANY elements at this point-->
         </ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:SendResponse"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="GenerateSOAPRequest" id="8adc406e-8917-4cd6-bd1e-42e22b743172"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_MTOM(&lt;5MB)" searchProperties="true" id="6dbec13d-11ec-4857-a5b9-cfce6f4dce6f"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="ff44bf9f-bd97-4184-9df7-40c11e975129"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="83b9abdf-3d53-4095-8145-b159fd9d19e2"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="3486ab6d-d2af-4f66-8f66-905da5d8450f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="b79447c6-2a67-4e79-ba4a-24e89fe65763"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="30b0c8ca-8e2c-4beb-b0d8-89ecb55e144e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="68e4ab03-b108-450b-94a0-aece53b9a031"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="b88f2caf-2df2-4626-a410-b00157be4bdb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="39cda22a-f34c-4cb2-bcb7-00deaadd4f48"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="421fbb90-cba1-4899-ad41-ecd2f6bc96ba"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="c950e0de-3f3a-499e-9272-227665867e7e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="049468d1-a183-45b6-8917-c291b35a5ea7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a8bb554b-e1be-467f-b69f-3b66c4955c27"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="35991bbc-6810-4af5-ac86-da695df5d939"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>zWrZQC5qMmJFagV9OJ/bPu2Whawrnzvhhjqk1yAmkfM=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>xAWPUc/TFnJNiGPNy/uy9P4y/e/0Q160Y7Zv2KAVl/ISVFkxUk1ExGtHiitT2eDiZjEklRaPdgj6+gLFkVAbfg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>6f53764b-a4b3-11e5-93ce-08606ee4e9a5</ns:MessageID><ns:ReferenceMessageID>6f53764b-a4b3-11e5-93ce-08606ee4e9a5</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>6f53764b-a4b3-11e5-93ce-08606ee4e9a5</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRequest_FOIV" searchProperties="true" id="5068a115-0b84-4189-8fbd-5eea5113f2a9"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="827c8b7d-5a24-4c9f-a341-20eb93007fc2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="031fea58-0056-4909-83b5-eccbbf71ac92"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="40d5f0ec-aa6e-427e-bc6a-851a8c7ecf1c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="dd9f91b5-11e7-492d-9287-2be975fc4cae"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method

def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="18e3b7db-f54b-4fa1-941f-a4ae790b883e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetRequest" id="ebb652a8-b86a-4099-80b0-c1e07a348b0c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetRequest" id="e5984733-082b-478f-b4b0-0d7d5b5161ff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ec5edfb6-31b7-42c8-ba3d-4cdfd2c5da65"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="5a0fd573-5c33-464d-868a-33e83688dd9c"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>20</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>300</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Dl7IvgebrKD3wKiA8zqZzOMYvC6MznoRNe1DGoTUD41KaUgHe1GiZ7zBJQgm6mOBvS4/BZ3jZSPbM7mhlHm3AA==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Ack_FOIV" searchProperties="true" id="ee5600ce-ab8b-4fde-99a2-010be985cc67"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f753f3b7-ef2c-472e-9976-6ba79516a4ef"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>nt_foiv_1</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>messageId</con:name><con:value>0417b53b-7190-11e5-bd46-0050568d52d6</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="3b5bd882-1537-4e28-afc8-871878ba316d"><con:settings/><con:config><script>def xml = '&lt;ns2:AckTargetMessage xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER" accepted="true">'+context.expand ('${messageId}') + '&lt;/ns2:AckTargetMessage>'
</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="d3539fde-aa3b-4d57-9e0c-dfc95245b759"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="4b7f7d0d-4fa5-423c-9895-a718e01b574e"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5ad6b713-9495-42f7-8770-27c0e0e093be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Ack1" disabled="true" id="5434b9bb-b07a-4658-b444-064f4f159687"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="Ack1" id="441a57f7-7e6e-405f-8d79-9e1052342f5f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f712a706-06bf-40a1-83d1-42ea49cc1651"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Ack" id="fb3319d5-2374-4034-88f8-90e0f4e22dec"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>Ack</con:operation><con:request name="Ack" id="912ac3c7-b1d8-475a-8a97-d2b152e38e70"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1922d7ca-6d3e-4130-be37-a265075e1b3f"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>dqzHs+1E/chXGEPx/yYD+yLKMyRFtJzftZB3VNm+NRU=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>wAwgwVTtr7V16qjtph9bBgplHkR7f6UFkcVo/y8X77Bkbmg+w0fo78eu48rvoBYFQD4O7NXbritcAI7lds3dVw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIBgDCCAS2gAwIBAgIEFCLSYjAKBgYqhQMCAgMFADA1MRIwEAYDVQQLEwlzbWV2LWxvYWQxEjAQBgNVBAoMCW50X2ZvaXZfMTELMAkGA1UEBhMCUlUwHhcNMTUwOTA2MjAzNTEyWhcNMTYwOTA1MjAzNTEyWjA1MRIwEAYDVQQLEwlzbWV2LWxvYWQxEjAQBgNVBAoMCW50X2ZvaXZfMTELMAkGA1UEBhMCUlUwYzAcBgYqhQMCAhMwEgYHKoUDAgIjAQYHKoUDAgIeAQNDAARAX0rSuTrqIWEDQi2F8f9c2LLKHevEv+t8hj6pVhCiVN3i2clntbumphLxIl63+aF/6KtNwflTVgH5OkmKl2aZiaMhMB8wHQYDVR0OBBYEFMc4qp/p85x+lxp6DJTA/TrXxDvAMAoGBiqFAwICAwUAA0EA5B3oCnRS+vJIosb29QZKgBItupFzPN+msVzQOB2Vay2R/hpGPYk9tMYWQY9nL2H91lT96T1Dg1YGei9AQbh7hg==</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:AckTargetMessage xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER" accepted="true">0417b53b-7190-11e5-bd46-0050568d52d6&lt;/ns2:AckTargetMessage></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtp(600MB)" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="af594d1e-14d3-4ab5-bc78-5f3b1ac918ae"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="df56012e-a78f-4da8-8dd2-f466d773b4da"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data600MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="3fd63bc2-3794-462d-aaf8-d7c29b51b183"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="9e069459-01b4-4d1b-96bc-57927fa090cd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="bb313f75-4081-4f79-aecd-c712c6251907"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5e20e399-3790-11e5-ba68-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtp(500MB)" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="41d359bc-7ae8-451d-ad57-4778a3759561"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="2cbb9894-e32a-4e14-8d28-8b20d3e65ee7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data500MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="d3f8aad3-714e-46c1-842c-98c0f6d2280b"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="5e64c6b9-31e6-4919-a04b-04ea3b750c37"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="d77b45bd-dce9-468f-9517-04f011873c44"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">612651b1-4cb9-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_FTPx2" searchProperties="true" id="fecc5278-f00f-4da5-8571-059d67f26a76"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="05a35980-cf7a-4561-ad64-4c280e4d1411"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>eae8a474-4cb3-11e5-a10f-d4c9eff07b77/data10MB.txt;f7711ba5-4cb3-11e5-a10f-d4c9eff07b77/data10MB.txt</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg;image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="41dad01b-d9c6-4734-8a53-7b8b44d2b1df"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="402d8662-d746-4fea-83a3-954948c210d1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="46043b9c-ac3b-4998-96d8-ba6565f02e5c"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="01d9ec2a-9912-4192-818b-18d2ebef3712"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="bf3f9cb1-00e7-4446-8e01-cae16adfc379"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="cef77ad5-5f14-49cb-930e-20ef4c030ecb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="c41a4828-6cb3-4c3b-8a04-4a53bbe9182a"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="96cd241c-5ca7-4cee-b22a-fb4c70f1c4e1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="a5782723-9b5b-4e55-8892-19f3661131d0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="28c08aee-9a3a-46db-b002-82bec04f116d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b3398d18-d9e1-4cec-8252-235dedca0f64"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="d6bc9323-9bfd-4c66-93ea-f5b4fa9b0fba"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>M4t9kTGnIHTIh2eCFATZzX3B+0X/BjtwRXlWGhFX6t8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>2P5sfputiyc7x5nTSis2cGVCPZai6w69jYmOSQXK+ZXti7ihHBnDNpCfjymxvpT8L+BjZxx7MHQlLAYeADgsfg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>44a2c407-4cb4-11e5-a10f-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>44a2c407-4cb4-11e5-a10f-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:RefAttachmentHeaderList>	<ns2:RefAttachmentHeader>		<ns2:uuid>eae8a474-4cb3-11e5-a10f-d4c9eff07b77</ns2:uuid>		<ns2:Hash>njrTApERwRzPrrsRmu7vOXXkFLcXjicqC/SmQ7DKc9U=</ns2:Hash>		<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:RefAttachmentHeader>	<ns2:RefAttachmentHeader>		<ns2:uuid>f7711ba5-4cb3-11e5-a10f-d4c9eff07b77</ns2:uuid>		<ns2:Hash>njrTApERwRzPrrsRmu7vOXXkFLcXjicqC/SmQ7DKc9U=</ns2:Hash>		<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:RefAttachmentHeader>	</ns2:RefAttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>44a2c407-4cb4-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_MTOM(>5MB)" searchProperties="true" id="0bfb79fc-2cd3-4dcc-a0be-e6dd47d0efbb"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="e06e4953-6e14-4069-951a-b9be09186890"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>5e20e399-3790-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="201c2d0c-a106-477e-b4ff-416bbb4479df"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="4208f086-aa84-4e43-b34f-b940313bfd38"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="580bf967-f7e8-4c50-afb3-f92eecab0460"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="f9e3062a-3d24-4c9b-8805-7057c14248e7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="68401c4c-9caa-40d5-98e9-90de7479966f"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="eb7c2afd-be02-447c-978e-e33f7ce4babd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="0af4b7d0-1d2a-4cd7-869b-2cb9ee89e585"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="f6ef6667-2775-4954-b15d-3dea7954f272"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="0da9530a-20b7-4110-8ff2-d0c2ba6dded4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="ac5f6fdf-6586-4ea6-a2c7-beeb34ddff42"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="28a7ad2d-153e-4a9f-943f-8bd4bd61f589"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>data10MB.txt</con:name><con:contentType>application/octet-stream</con:contentType><con:size>10485760</con:size><con:contentId>data10MB.txt</con:contentId><con:part>data10MB.txt</con:part><con:data></con:data><con:id>6fa8f13b-e990-46e3-82bc-242f047d3e53</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="0c581747-1543-4790-84c1-3229dddc866a"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>dxh2lzFh2Tlzmtf2w8DtHUeYfucuCB68BauOBPNGTM0=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>9q6/MPay+i/LS9oaWt3zWZFqiYMnu6ROgvP5PwZO2QqRxRYiurqEbYxyKVvbv1X02dyXfj8XvhUY6Vmd3lUmvQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>c95d5388-88b6-11e5-a513-08606ee4e9a5</ns:MessageID><ns:ReferenceMessageID>c95d5388-88b6-11e5-a513-08606ee4e9a5</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>data10MB.txt</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>data10MB.txt</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:data10MB.txt"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>c95d5388-88b6-11e5-a513-08606ee4e9a5</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtp(10MB)" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3db07436-9279-47eb-b91d-627893d6d8fc"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="59494c94-4f91-4192-a37e-8047fea7297b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="9f2fbdd5-a7ea-44e0-93d2-ba876982f596"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="e034530f-5057-452e-b628-85a92ce013f0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="b26aceeb-9936-48fe-bed5-ef47858f15de"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">b9d6796c-a4b3-11e5-93ce-08606ee4e9a5</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_FTP(10M)" searchProperties="true" id="bd97aa29-6df6-466d-9b40-27cca985079c"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f7f0a929-7235-469b-9879-0ace017beba5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>76f956ca-8243-11e5-ba90-d4c9eff07b77/data10MB.txt</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="6559c739-f57a-4aea-9f41-eb70834647b9"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="860b59a3-38a8-415c-b0c9-6c145fface53"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="2350f3ce-3f00-4a09-8e3e-815bfc395128"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="ffa37c74-1c38-489c-b56a-2acfc2294a1b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="c924fdc6-2e54-4d04-9cef-f5b3e6ac3e60"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="d3ac606f-5bb6-40a9-85d9-c1aaf9765a7f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="2cb3350c-f38d-414a-a2ce-69caa4c4b826"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="14d9d9c3-edbc-418c-814b-023dc1806727"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="61b6f14b-eada-4871-bc01-190315e528a0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="18131e33-2b59-4939-b2b6-bd35328d62d6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2bfd31ac-46e5-40fb-8237-ab2fceec9138"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="cfa51788-14d0-418b-8c68-f4837ee6f340"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>5/bUMZAK2S3e/CqbLI+POc9fQHAjcYBU4smgzt8hy28=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>a76pXufQsZgOFaE2nxnR/izOjfzBDxRSyt8Ro5if0r5YJmxstNDab1sUA3nVoimvbFXWbzGUtpeYXipxx+LP+w==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>8353e02b-8243-11e5-ba90-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>8353e02b-8243-11e5-ba90-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns2:RefAttachmentHeaderList>	<ns2:RefAttachmentHeader>		<ns2:uuid>76f956ca-8243-11e5-ba90-d4c9eff07b77</ns2:uuid>		<ns2:Hash>njrTApERwRzPrrsRmu7vOXXkFLcXjicqC/SmQ7DKc9U=</ns2:Hash>		<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:RefAttachmentHeader>	</ns2:RefAttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>8353e02b-8243-11e5-ba90-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetFileFtp" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7d6db447-023c-4bd2-9faf-247af21c7304"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="e0fa74db-0768-4417-8ff9-0dc2581008df"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value>34d066f8-4b2e-11e5-8bb1-f81654d37043</con:value></con:property><con:property><con:name>login</con:name><con:value>YSV9C1eO5dWaEJG1yPi1FgcuCxWYMG</con:value></con:property><con:property><con:name>password</con:name><con:value>WRN6zDdjqUVlgr7dJ3IQpQgFiRXC1M</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="GetFileFtp" id="3d484685-51fb-418c-956f-3208223370d9"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security.MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${login}')
def password = context.expand ('${password}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
def filePath = groovyUtils.getProjectPath() + '\\smev\\downloads\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

ftpClient.setType(FTPClient.TYPE_BINARY);

ftpClient.connect(address, port);
ftpClient.login(login, password);
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если был обрыв связи, продолжим загрузку с места обрыва
// Размер файла на ФТП

def localFileSize = 0
if (file.exists()) {
	localFileSize = file.size()
}

def ftpFileSize = 0
if(context.expand ('${fileUuid}') != ""){
	//ftpClient.changeDirectory(context.expand ('${fileUuid}'))
	ftpFileSize = ftpClient.fileSize(fileName)
}

if (ftpFileSize > localFileSize) {
	ftpClient.download(fileName, file, localFileSize)
}

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)
</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>e3103454-cc8a-11e3-ac85-2c44fd1010cf</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_QUOTE" searchProperties="true" id="cdabceb4-8d1a-455c-a11b-94730d3eeeff"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="16ebf3a3-cd76-4f71-ba58-1531bdf644e3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://demo/roiv1/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>attach5MB.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="ce55f71f-cffd-4eed-85f0-550e6c59559c"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="633bd77b-9ad5-4fcd-8bd6-b7b9daf9e328"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="b3f1286e-1f39-4c02-98bc-7a64d6202439"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="b557235b-410c-4c02-bcb4-84aafe2d593d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="69af9ed6-d26b-4f92-b615-1ef5e12d5294"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="5667c86b-4f13-4926-b637-6c487452d8d9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="5438f2d7-40e5-4bb6-a6f8-051f5e4c5549"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="0d7f2f61-d986-4f3b-89f6-f11d1e3a2018"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="182031c6-3948-43fb-abf5-e1ae5b53aba8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="d7dd0db6-b03d-43fd-8c27-a801a521dada"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e7a4c9de-5196-4ee7-be38-aed0a65cd769"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>attach5MB.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>5000000</con:size><con:contentId>attach5MB.jpg</con:contentId><con:part>attach5MB.jpg</con:part><con:data>UEsDBBQACAgIAGWW/0YAAAAAAAAAAAAAAAANAAAAYXR0YWNoNU1CLmpwZ+zBgQAAAACAIKb95RapCggNuDAxIAAAAAQf9f9ylBLBwjGCuH4CxMAAEBLTABQSwECFAAUAAgICABllv9Gxgrh+AsTAABAS0wADQAAAAAAAAAAAAAAAAAAAAAAYXR0YWNoNU1CLmpwZ1BLBQYAAAAAAQABADsAAABGEwAAAAA=</con:data><con:id>387be41e-a623-47b6-9c36-575727aeae23</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="1b0b003e-6a8c-4070-87ff-a463693c785b"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>3SOkwUlphThtKuCR9617uvc9TksiKXei27UigMPMhjM=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>e3egwFhs7qNEESQABA5LXOTSmPvqRjq3ThxY3MWcC1+zgwUPqMO/wZyCzyCVBLM7ApQVkw0BFaL87TgheL7tWQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>94f9ff80-3793-11e5-ba68-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>94f9ff80-3793-11e5-ba68-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://demo/roiv1/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>attach5MB.jpg</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>attach5MB.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:attach5MB.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>94f9ff80-3793-11e5-ba68-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRequest_ROIV" searchProperties="true" id="ee24c5d9-aea0-4bd0-bd60-4fed5f0c3d34"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f417464f-770c-4cef-82cc-c66218ebd2a2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="a61f8c37-675a-495a-88c9-5d4a6d1f689e"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="a26163ea-6d1d-4fb2-9bf3-f5f20090974c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="381b8b6b-e700-41b5-94ab-dd90d0ffffc8"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method

def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="fdd4736b-8647-4f30-9db9-093757be7fdd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetRequest" id="ec92cfb5-02b0-45bf-9c5a-eda7f6897b11"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetRequest" id="aa026a12-bc3c-4854-8ae5-9d71c7fa6ad2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="131de35d-f8f0-4f9f-93dd-782d75ba1119"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="28155a79-bd1b-417c-a6de-2765e997379a"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>300</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>RUfENTkIyBKGpA40ozJ5bobmnrzePNtgU8onpzmrvOLmHMUCV+dZchgVg52IOgZtDmBMIBbjIUUQMjWvfYXspA==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Ack_ROIV" searchProperties="true" id="c3d6bf80-7cf4-4860-bb86-90a0b493d870"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="a2b1ba32-c962-4546-a22e-295267a96d33"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>messageId</con:name><con:value>c833cba7-4b2c-11e5-8bb1-f81654d37043</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="8daea868-5dcb-4a2b-a273-0e87cea94e5e"><con:settings/><con:config><script>def xml = '&lt;ns2:AckTargetMessage xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER" accepted="true">'+context.expand ('${messageId}') + '&lt;/ns2:AckTargetMessage>'
</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="c2077974-1950-444b-8d1d-8ca3157585ad"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="36a4e143-db85-47f4-9fbf-f50bce9c1db2"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="79a86574-8deb-4a1c-84f5-96b61387dcbe"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Ack1" disabled="true" id="a97c4c6f-3fd1-4823-a50c-43ae9989b7d3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="Ack1" id="d4c1c635-8820-4a08-9aa9-23a97f75ad78"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="927785a5-ade3-4a95-adc0-94e7b4d137bc"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Ack" id="dc00f720-ec8f-4afa-a5d5-eda2074bdfe0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>Ack</con:operation><con:request name="Ack" id="cb9285ac-04da-4c01-89f7-1f728684889d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="426a53ca-1871-4804-8b16-de5228b19cd3"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>y6V20L+rAAPI63DASDXXID9s63cw8GLScu/N008S+o8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>BIenNIyeQgH5qGGLHciQyZ9A5oeP8RHATLy5RadMt2UsBRfxFyTMXUJvbndD/XlCVRL05fTc/76Qwc3lyWgNbQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:AckTargetMessage xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER" accepted="true">c833cba7-4b2c-11e5-8bb1-f81654d37043&lt;/ns2:AckTargetMessage></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_QUOTE_FTP" searchProperties="true" id="521531d2-98a7-4618-9ce3-7d0fb1fe2af2"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="3b2c8205-9704-4ea7-bee9-cb5c6ae725c5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://demo/roiv1/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>attach5MB.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>1928ba8d-5567-11e5-8ddc-d4c9eff07b77/data10MB.txt</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="b0b08db7-8184-452e-920f-b07a53a26ee7"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="83a0e131-5f67-4396-ac10-82ef665991db"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="ebcae2d1-3963-4f7e-8460-cbb08972c88b"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="9241a6eb-e001-4707-bb2a-947e48447c0a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="e0cdb44b-b02c-4de0-916a-cc3153cc1360"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="fa88dd4f-e345-4d33-b984-e496fd245433"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="ee30892f-4ff2-4542-90d8-04bd3b424fce"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="2ca1c6c2-5d49-4e52-acb8-10057ede224f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="dae10fd9-e7c3-4b47-8b64-6086c6134fbd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="331661c3-faeb-4549-871e-f1238d503942"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="db919d64-4d78-4312-8918-1c02aed985af"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="2a98ca60-c38a-4934-8c63-5c03b79f872a"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>x+DnnR04fpZvCSsSxxK/jpZrHSI5gF2Ifm2yvTiAHlc=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>crsMpRS5hbEKQClbMIxnHdQOK/XCAPfRo2GhJH5Eg3r6bb0TySsuE8vIkksOBc+7aOD+Th0RCxuAwCfaVwdwBA==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIKbjCCCh2gAwIBAgIKRtgxWAABAAABXjAIBgYqhQMCAgMwggEUMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSUwIwYDVQQJDBzRg9C7LiDQo9C00LDQu9GM0YbQvtCy0LAsIDg1MSAwHgYJKoZIhvcNAQkBFhF1Y0BuaWkudm9za2hvZC5ydTELMAkGA1UEBhMCUlUxGDAWBgNVBAgMDzc3INCc0L7RgdC60LLQsDEVMBMGA1UEBwwM0JzQvtGB0LrQstCwMScwJQYDVQQKDB7QpNCT0KPQnyDQndCY0JggItCS0L7RgdGF0L7QtCIxLDAqBgNVBAMMI9Cj0KYg0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMB4XDTE0MTEyNjEyMDIwMFoXDTE2MDIyNjEyMTIwMFowggINMRYwFAYFKoUDZAMSCzEzODMwNzQzMDUyMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSMwIQYJKoZIhvcNAQkBFhRkLm1ha2Fyb3ZAdm9za2hvZC5ydTELMAkGA1UEBhMCUlUxITAfBgNVBAgeGAA3ADcAIAQzAC4AIAQcBD4EQQQ6BDIEMDEVMBMGA1UEBx4MBBwEPgRBBDoEMgQwMSswKQYDVQQKHiIEJAQTBCMEHwAgBB0EGAQYACAAIgQSBD4EQQRFBD4ENAAiMTkwNwYDVQQLHjAEHgRCBDQENQQ7ACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8AIAQdBBgEFAAxADIxKzApBgNVBAMeIgQkBBMEIwQfACAEHQQYBBgAIAAiBBIEPgRBBEUEPgQ0ACIxMTAvBgNVBAkeKARDBDsALgAgBCMENAQwBDsETARGBD4EMgQwACwAIAQ0AC4AIAA4ADUxQzBBBgNVBAweOgQdBDAERwQwBDsETAQ9BDgEOgAgBD4EQgQ0BDUEOwQwACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8xKzApBgNVBCoeIgQUBDwEOARCBEAEOAQ5ACAEEAQ9BDQEQAQ1BDUEMgQ4BEcxFzAVBgNVBAQeDgQcBDAEOgQwBEAEPgQyMGMwHAYGKoUDAgITMBIGByqFAwICJAAGByqFAwICHgEDQwAEQDD90bmHwMzkxNM2vaJktp/15iSkKV7tUWBQKCWlZYR6/NJrK6VN3XxeuVTBQF3ZWI1073vOlk5kkU7wrtozTqSjggZQMIIGTDAOBgNVHQ8BAf8EBAMCBPAwJgYDVR0lBB8wHQYIKwYBBQUHAwQGByqFAwICIgYGCCsGAQUFBwMCMB0GA1UdDgQWBBTsEo0kMiqNvTo+8U/8dGJaJhIVojCCAVUGA1UdIwSCAUwwggFIgBRPPwRh10bRxpdEXUee1QXwuIzV0aGCARykggEYMIIBFDEYMBYGBSqFA2QBEg0xMDM3NzM5MjkwNjc2MRowGAYIKoUDA4EDAQESDDAwNzcwNDAwNzE1NzElMCMGA1UECQwc0YPQuy4g0KPQtNCw0LvRjNGG0L7QstCwLCA4NTEgMB4GCSqGSIb3DQEJARYRdWNAbmlpLnZvc2tob2QucnUxCzAJBgNVBAYTAlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxFTATBgNVBAcMDNCc0L7RgdC60LLQsDEnMCUGA1UECgwe0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMSwwKgYDVQQDDCPQo9CmINCk0JPQo9CfINCd0JjQmCAi0JLQvtGB0YXQvtC0IoIQEaXCzlfpiKFAzgNND7JESzCCAQAGA1UdHwSB+DCB9TAuoCygKoYoaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDEudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMC+gLaArhilodHRwOi8vcGtpLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAuoCygKoYoaHR0cDovL3JhLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDMudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMIIBpQYIKwYBBQUHAQEEggGXMIIBkzAuBggrBgEFBQcwAYYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjAuBggrBgEFBQcwAoYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjA7BggrBgEFBQcwAoYvaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly91Yy52b3NraG9kLnJ1L2NkcC9jcm9zcy12b3NraG9kLTIwMTQtMi5jcnQwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC0yLmNydDA1BggrBgEFBQcwAoYpaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QtMjAxNC5jcnQwKwYDVR0QBCQwIoAPMjAxNDExMjYxMjAyMDBagQ8yMDE1MTEyNjEyMDIwMFowMgYJKwYBBAGCNxUKBCUwIzAKBggrBgEFBQcDBDAJBgcqhQMCAiIGMAoGCCsGAQUFBwMCMB0GA1UdIAQWMBQwCAYGKoUDZHEBMAgGBiqFA2RxAjA2BgUqhQNkbwQtDCsi0JrRgNC40L/RgtC+0J/RgNC+IENTUCIgKNCy0LXRgNGB0LjRjyAzLjYpMIIBMwYFKoUDZHAEggEoMIIBJAwrItCa0YDQuNC/0YLQvtCf0YDQviBDU1AiICjQstC10YDRgdC40Y8gMy42KQxTItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuCAxLjUMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjQtMjIzOCDQvtGCIDA0LjEwLjIwMTMMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjgtMjM1MSDQvtGCIDE1LjA0LjIwMTQwCAYGKoUDAgIDA0EAGYcJfywlnDx2aVjrR218sUfJ0vzjBjNhymmOSmag73NBNy3UOS2JNZM4f29s1bvBNSiDkqO3m2bd/yTSH1a4DQ==</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>5e4d88cf-5567-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>5e4d88cf-5567-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://demo/roiv1/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns2:RefAttachmentHeaderList>	<ns2:RefAttachmentHeader>		<ns2:uuid>1928ba8d-5567-11e5-8ddc-d4c9eff07b77</ns2:uuid>		<ns2:Hash>njrTApERwRzPrrsRmu7vOXXkFLcXjicqC/SmQ7DKc9U=</ns2:Hash>		<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>MIIMnwYJKoZIhvcNAQcCoIIMkDCCDIwCAQExDDAKBgYqhQMCAgkFADALBgkqhkiG9w0BBwGgggpyMIIKbjCCCh2gAwIBAgIKRtgxWAABAAABXjAIBgYqhQMCAgMwggEUMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSUwIwYDVQQJDBzRg9C7LiDQo9C00LDQu9GM0YbQvtCy0LAsIDg1MSAwHgYJKoZIhvcNAQkBFhF1Y0BuaWkudm9za2hvZC5ydTELMAkGA1UEBhMCUlUxGDAWBgNVBAgMDzc3INCc0L7RgdC60LLQsDEVMBMGA1UEBwwM0JzQvtGB0LrQstCwMScwJQYDVQQKDB7QpNCT0KPQnyDQndCY0JggItCS0L7RgdGF0L7QtCIxLDAqBgNVBAMMI9Cj0KYg0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMB4XDTE0MTEyNjEyMDIwMFoXDTE2MDIyNjEyMTIwMFowggINMRYwFAYFKoUDZAMSCzEzODMwNzQzMDUyMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSMwIQYJKoZIhvcNAQkBFhRkLm1ha2Fyb3ZAdm9za2hvZC5ydTELMAkGA1UEBhMCUlUxITAfBgNVBAgeGAA3ADcAIAQzAC4AIAQcBD4EQQQ6BDIEMDEVMBMGA1UEBx4MBBwEPgRBBDoEMgQwMSswKQYDVQQKHiIEJAQTBCMEHwAgBB0EGAQYACAAIgQSBD4EQQRFBD4ENAAiMTkwNwYDVQQLHjAEHgRCBDQENQQ7ACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8AIAQdBBgEFAAxADIxKzApBgNVBAMeIgQkBBMEIwQfACAEHQQYBBgAIAAiBBIEPgRBBEUEPgQ0ACIxMTAvBgNVBAkeKARDBDsALgAgBCMENAQwBDsETARGBD4EMgQwACwAIAQ0AC4AIAA4ADUxQzBBBgNVBAweOgQdBDAERwQwBDsETAQ9BDgEOgAgBD4EQgQ0BDUEOwQwACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8xKzApBgNVBCoeIgQUBDwEOARCBEAEOAQ5ACAEEAQ9BDQEQAQ1BDUEMgQ4BEcxFzAVBgNVBAQeDgQcBDAEOgQwBEAEPgQyMGMwHAYGKoUDAgITMBIGByqFAwICJAAGByqFAwICHgEDQwAEQDD90bmHwMzkxNM2vaJktp/15iSkKV7tUWBQKCWlZYR6/NJrK6VN3XxeuVTBQF3ZWI1073vOlk5kkU7wrtozTqSjggZQMIIGTDAOBgNVHQ8BAf8EBAMCBPAwJgYDVR0lBB8wHQYIKwYBBQUHAwQGByqFAwICIgYGCCsGAQUFBwMCMB0GA1UdDgQWBBTsEo0kMiqNvTo+8U/8dGJaJhIVojCCAVUGA1UdIwSCAUwwggFIgBRPPwRh10bRxpdEXUee1QXwuIzV0aGCARykggEYMIIBFDEYMBYGBSqFA2QBEg0xMDM3NzM5MjkwNjc2MRowGAYIKoUDA4EDAQESDDAwNzcwNDAwNzE1NzElMCMGA1UECQwc0YPQuy4g0KPQtNCw0LvRjNGG0L7QstCwLCA4NTEgMB4GCSqGSIb3DQEJARYRdWNAbmlpLnZvc2tob2QucnUxCzAJBgNVBAYTAlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxFTATBgNVBAcMDNCc0L7RgdC60LLQsDEnMCUGA1UECgwe0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMSwwKgYDVQQDDCPQo9CmINCk0JPQo9CfINCd0JjQmCAi0JLQvtGB0YXQvtC0IoIQEaXCzlfpiKFAzgNND7JESzCCAQAGA1UdHwSB+DCB9TAuoCygKoYoaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDEudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMC+gLaArhilodHRwOi8vcGtpLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAuoCygKoYoaHR0cDovL3JhLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDMudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMIIBpQYIKwYBBQUHAQEEggGXMIIBkzAuBggrBgEFBQcwAYYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjAuBggrBgEFBQcwAoYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjA7BggrBgEFBQcwAoYvaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly91Yy52b3NraG9kLnJ1L2NkcC9jcm9zcy12b3NraG9kLTIwMTQtMi5jcnQwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC0yLmNydDA1BggrBgEFBQcwAoYpaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QtMjAxNC5jcnQwKwYDVR0QBCQwIoAPMjAxNDExMjYxMjAyMDBagQ8yMDE1MTEyNjEyMDIwMFowMgYJKwYBBAGCNxUKBCUwIzAKBggrBgEFBQcDBDAJBgcqhQMCAiIGMAoGCCsGAQUFBwMCMB0GA1UdIAQWMBQwCAYGKoUDZHEBMAgGBiqFA2RxAjA2BgUqhQNkbwQtDCsi0JrRgNC40L/RgtC+0J/RgNC+IENTUCIgKNCy0LXRgNGB0LjRjyAzLjYpMIIBMwYFKoUDZHAEggEoMIIBJAwrItCa0YDQuNC/0YLQvtCf0YDQviBDU1AiICjQstC10YDRgdC40Y8gMy42KQxTItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuCAxLjUMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjQtMjIzOCDQvtGCIDA0LjEwLjIwMTMMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjgtMjM1MSDQvtGCIDE1LjA0LjIwMTQwCAYGKoUDAgIDA0EAGYcJfywlnDx2aVjrR218sUfJ0vzjBjNhymmOSmag73NBNy3UOS2JNZM4f29s1bvBNSiDkqO3m2bd/yTSH1a4DTGCAfQwggHwAgEBMIIBJDCCARQxGDAWBgUqhQNkARINMTAzNzczOTI5MDY3NjEaMBgGCCqFAwOBAwEBEgwwMDc3MDQwMDcxNTcxJTAjBgNVBAkMHNGD0LsuINCj0LTQsNC70YzRhtC+0LLQsCwgODUxIDAeBgkqhkiG9w0BCQEWEXVjQG5paS52b3NraG9kLnJ1MQswCQYDVQQGEwJSVTEYMBYGA1UECAwPNzcg0JzQvtGB0LrQstCwMRUwEwYDVQQHDAzQnNC+0YHQutCy0LAxJzAlBgNVBAoMHtCk0JPQo9CfINCd0JjQmCAi0JLQvtGB0YXQvtC0IjEsMCoGA1UEAwwj0KPQpiDQpNCT0KPQnyDQndCY0JggItCS0L7RgdGF0L7QtCICCkbYMVgAAQAAAV4wCgYGKoUDAgIJBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNTA5MDcxMzQ2MDRaMC8GCSqGSIb3DQEJBDEiBCCeOtMCkRHBHM+uuxGa7u85deQUtxeOJyoL9KZDsMpz1TAKBgYqhQMCAhMFAARA+XTkt0kG91gEjpiYDMJvd9XKjw6uS4osuBo/WGyLObAVsyZ+6o2qEWb0OrMXo/NchZ/Twmk9sswWzh40EQikKA==</ns2:SignaturePKCS7>	</ns2:RefAttachmentHeader>	</ns2:RefAttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>5e4d88cf-5567-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetStatus" searchProperties="true" id="763e86a8-50c9-4d32-a335-159a8836e4a0"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="8a38a7d9-a370-4fef-bf64-a705df02a6e0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="4d586943-0b6a-4f6a-86ac-51dade499ede"><con:settings/><con:config><script>def xml = '&lt;ns2:Timestamp  Id="SIGNED_BY_CONSUMER" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>'</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="31f2b937-f4d4-4dae-a0ee-3fdb10762f4c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="0d3341b2-f388-48fb-9972-e014ebbc65d9"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c8ce7805-8c02-435e-873b-4f36d3fc1e67"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetInteractionStatus" id="0fda0b9a-23e1-4d17-b8ce-fe5d1f57eb61"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetInteractionStatus" id="0cdb8a06-2076-4cc4-94d1-17c800553832"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:GetStatusRequest>
      ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:GetStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c3614df4-d559-4254-b56a-59ff0ab2a4dc"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>2eThNAD1e+3/Duc/xbW8vRvkVD82zvvSZnwB9X+uXZ8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>J1uYvaxFcMt6vTiYrsC47kH/dm1LqY0PJluwrewUqa+8ehd9nuvVWn+YZGR5uYyo07UynykOX65ZLvfh+cIBRQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:Timestamp  Id="SIGNED_BY_CONSUMER" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtp(&lt;1GB)" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="947c6b2b-f415-40bb-9697-e5b5485df5ab"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="87e8027f-edd3-46d8-9884-7b9693724481"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="dfe1a9b3-0ddd-453a-8736-8ebcdaef2059"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="711a0e78-484a-4110-aa13-997cedc2a8a2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="83c7451c-9fc0-4935-bf26-5a3b1af377ad"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3f8981b6-5b9c-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_FRGU" searchProperties="true" id="e29f9829-5a80-4278-8985-6db2c216bad4"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="aec9f2b9-3b7b-4cf2-9b70-c6967652f14b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;RightsMatrixRequest:RightsMatrixRequest xmlns:RightsMatrixRequest="http://rgu.lanit.ru/RightsMatrix/1.0.0" xmlns="http://rgu.lanit.ru/RightsMatrix/1.0.0" xmlns:ns3="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.1">&lt;date>2014-08-25&lt;/date>&lt;/RightsMatrixRequest:RightsMatrixRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA14</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA14</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>rightsmatrixs.zip</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="ecd4b9cf-31e8-4219-85ef-5874e3e1e9c0"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="e3bd75a2-e54c-4b75-b3b1-6abb7fbf49d9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="be7ee753-73e1-4ca4-a7ce-d1c06fccc8a8"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="6a563b92-2ed4-4c4c-bf5e-359e4f089420"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="c26b81b3-ffa1-4d2c-8398-def034cb8925"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="bb1c19eb-3634-43bc-87f6-8534e1a8a5ee"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="dcdd4e0a-59b7-4632-9bac-d5f1b6dffbf5"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="6a84eda4-d6d4-4a1b-b981-426965e5541b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="c4d4d3bf-9cec-4732-86b5-fe8767af4515"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="37cc2b4b-a41f-4a10-9a28-6e327db2f0f2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="93b71a89-2e99-40bd-aeb0-b761a5057f2b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>rightsmatrixs.zip</con:name><con:contentType>application/octet-stream</con:contentType><con:size>419</con:size><con:contentId>rightsmatrixs.zip</con:contentId><con:part>rightsmatrixs.zip</con:part><con:data>UEsDBBQACAgIAPJqI0cAAAAAAAAAAAAAAAARAAAAcmlnaHRzbWF0cml4cy56aXAL8GZmEWEAgaBwJXcGJMAHxEWZ6RklxbmJJUWZFcX6AVC1HAyiUcruJrrL74SDFDIyMMhiqAXzIBy95OKy2v6DfAcUOJzfe39Tl3OIuvj//0bLpxsmWPj5vtRmnGKqVa0RNY1Nerf+2qtep1Ze+rpvUrbzjpcXHT64XFf7cykw88sC618HOs2u11iLHTU8HS/q9/dnglv6aeYAb0YmewZc7leBsgSgNKoLuRgUGCDOl2Bw89yvFfr0AiOMVvu9D0wjzMfmZ5j5IHN0CIUAsnXH7gXcUXh2gZEh/dS7kKcIOsCblQ2khgkIzwPpfWAdAFBLBwiSbeM87wAAAKMBAABQSwECFAAUAAgICADyaiNHkm3jPO8AAACjAQAAEQAAAAAAAAAAAAAAAAAAAAAAcmlnaHRzbWF0cml4cy56aXBQSwUGAAAAAAEAAQA/AAAALgEAAAAA</con:data><con:id>6786e6d4-f46c-47da-9bb4-d078cdf37b8c</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="47c0e35d-b0fa-4a5a-9044-7af8066910d8"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>W21/s9L7hUL4qbyJqdtAL3eFoR9HneZmzpQwpkweFUc=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>YZzJBzPQK4WlgvBv/M0chP1O8JlbmfNS6bcob/8rq/Aur3KrwdlL+d+TnDHhEJXgcuFOZ7lxQJGz2oOBf5qdlQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>748ffa22-521d-11e5-b9da-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>748ffa22-521d-11e5-b9da-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><RightsMatrixRequest:RightsMatrixRequest xmlns:RightsMatrixRequest="http://rgu.lanit.ru/RightsMatrix/1.0.0" xmlns="http://rgu.lanit.ru/RightsMatrix/1.0.0" xmlns:ns3="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.1"><date>2014-08-25</date></RightsMatrixRequest:RightsMatrixRequest></ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>rightsmatrixs.zip</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>rightsmatrixs.zip</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:rightsmatrixs.zip"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>748ffa22-521d-11e5-b9da-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestFRGU_R" searchProperties="true" id="703b4a5e-c26f-45f0-b401-ca81d616d478"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="83646fca-c34f-4ff5-b029-a5e00d7ce6b7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://qa/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA15</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA15</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>100100</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="c3128685-e91e-4ba9-af58-6024b0b5cd25"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="7bc4463a-92c9-4827-9cee-295d81d343cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="33c7dddc-9ca8-4f60-ad07-14ce03823933"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="dc688737-88e8-4c89-b2d9-bd8d5254d844"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="a26882a4-2d08-4a1e-a5af-2848d4f03bfd"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="c05e11fd-5727-47b8-b990-0c93b0e82a0b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="e8f00e8d-ecdf-4dcf-a1f7-39da89d71e55"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="a554918a-6f26-4293-8e4c-08c0ea79f98c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="21c89674-6988-4467-b415-e41d1671ffb7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="fe934a71-1f20-48f9-aed3-f9d75a7db242"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c43d9675-ac01-4ed6-ada7-ef3bd333499a"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="4c9d8a82-f783-4c7d-81e5-e4b6a20fe808"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>HrVXQS53FVxMvkmCWUogq1NUoD0RfWE2B5McuuzfVE4=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>jhUtjrFKdzANfbLjardV+hhrksTTwYnB+8jLwZHaMbjWm/KOICzj2MYsAFwpw1xQnGjbf8dcyiEo8Vv5WaD3Hw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>826c4183-521d-11e5-b9da-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>826c4183-521d-11e5-b9da-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://qa/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>100100</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>826c4183-521d-11e5-b9da-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestFRGU_RI" searchProperties="true" id="ce898887-b0cd-4de2-ad59-59d8b6fb9d7b"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="07997352-b34c-471e-a348-8dce2407aa79"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://qa/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA16</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA16</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>4500000010000011357</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="ada78057-5c8d-45d3-9465-00d9aca9f7e1"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="8ba78a60-4539-477e-94fd-4b94c99a60ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="77572058-c232-4744-9931-73c4589313dc"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="e4cac4cb-f439-4ff6-850e-8ed53bc6e14a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="9cc708ef-6be1-49dc-abbd-4c56441b9f90"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="882f31f2-338e-4b0a-b784-ef2d76b3ab93"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="fc00e9ba-6b4c-4f5e-8419-b20f3ac245f9"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="5495e44a-93af-49be-9847-4eeb3859a670"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="2566693d-c836-4f98-85cd-894e0c355071"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="9ad41115-f223-439e-abb9-c3e957a90e03"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ee2e0553-e069-491a-b5a0-5018e07c66a3"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="9c91e7d4-0f86-4a94-b8d2-f5b2e887929e"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>zZl0YB5bCytQ16OyAgq/SPfXc4rTQvWFEVV+MrQRvrY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>rfaiR1Amvf81BKS/VdU/0sK/TR/GD6OHLz9sn3mZ0HPa08rCtpIa/vBrj6a7mmIZ9OpNix9UNSaLTJxP52EtqQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>97744732-5d1e-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>97744732-5d1e-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://qa/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>4500000010000011357</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>97744732-5d1e-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestForQueueLimit" searchProperties="true" id="4f727048-5504-4aa1-9268-0e1d21a82605"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f2bc99c6-a386-4ecb-ae08-455322a03b88"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://foiv2/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="1fff742f-3df8-4707-a767-dc4736b45e4c"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="8a47ee96-3345-4af4-b7ad-c44447d726ca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="04272e17-2ba3-4b16-baae-7389c8a731f3"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="665bd755-3cbd-4b2e-8301-fb6ed2a79d48"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="2cb3b839-599c-4aea-9174-d7b2bf0dac4b"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="25d6f12b-cd38-4756-9592-42a4bee2748b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="2a5dbb77-b08c-4489-82dd-72ec84a4f1ea"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="c2c069b1-929b-473e-9c0f-e42c1b7f53b0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="b5df3a3b-b1d9-4ad1-b378-8c781d9d0f5c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="ca454dbb-18c5-450b-822e-7f1dd8a51558"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="bc7728b2-9006-462c-9c99-93c35be11674"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="181a003f-15b5-4710-9de2-c3e35f540633"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>/WSl1Mw26HbvTe6YUcaeQHe9HlM6DYk6PBEswGK2l9o=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>qz8hVflk7oNK+ZQ/GL0YkMmxWtGh6yCHOxSR8wXIa9Z6J4VpxhOGZTQK/YqADUMKgLQOpQdqjawea95boGBTNg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>df8943cb-4b06-11e5-a10f-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>df8943cb-4b06-11e5-a10f-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://foiv2/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>df8943cb-4b06-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRequestForQueueLoad" searchProperties="true" id="96305f3d-69e9-421a-a104-365c857e0a7b"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="e23f416e-6618-4c08-a810-13a073d92161"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA16</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="76c094c1-50f2-4be9-97df-cf2ea859c4e3"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="8ce3b368-1908-4eb2-aa75-401f858987f6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="b8e2d80c-97e7-4dc9-95d2-c3143419b1b3"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method

def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="75bd446f-9247-4f40-9a73-a08220da999d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetRequest" id="166d3622-cb06-4a5c-8223-07d06edd8467"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetRequest" id="136e20c5-18be-4ed3-8ee1-cc3a96e101ef"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9fce941f-df6c-45e9-9b13-9d343d930047"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTestForMonitoring" id="93b91159-0820-489e-bc76-2f5a3ce1f4f0"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>20</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>300</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>fjIpbZqmmvxFGneq7ZzEya6k63Uq5YZZpurQpK7KpsITG0Mk3CJzhuSYKtrs0G/xhMQqYGApA6b33R2fhyiECQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestForQuoteLimit" searchProperties="true" id="0b9ec4ae-abea-4f5e-a14a-5596ca180104"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="968991ba-da66-4bc9-8353-c4a5fd68cb9c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://foiv3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>data5MB.txt</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="fb27623f-101c-4d65-a29f-07b8403be7d5"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="41a44c7d-1ad3-4a74-904c-1522a961260c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="31c403b0-b4e2-4225-827d-31dc685754cd"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="a348765c-e174-4e9d-a909-276535245c7f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="f724ccc0-0118-40a3-badf-b20927e76e66"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="005d948d-82e5-4573-bbb2-8031f53edb63"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="6d8a56e9-8018-4964-8266-f14f3cb57719"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="534db05b-7b71-4044-9e04-c3afffb6cb85"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="3d6589a3-c6da-4c18-90b7-56b79b6c8d9d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="c4b0fd1e-a24e-422f-b6c5-db7dfa774405"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9d12a9ef-6f8f-469e-8bf0-9aa6f749b96b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>attach5MB.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>5000000</con:size><con:contentId>attach5MB.jpg</con:contentId><con:part>attach5MB.jpg</con:part><con:data>UEsDBBQACAgIAECZBEcAAAAAAAAAAAAAAAANAAAAYXR0YWNoNU1CLmpwZ+zBgQAAAACAIKb95RapCggNuDAxIAAAAAQf9f9ylBLBwjGCuH4CxMAAEBLTABQSwECFAAUAAgICABAmQRHxgrh+AsTAABAS0wADQAAAAAAAAAAAAAAAAAAAAAAYXR0YWNoNU1CLmpwZ1BLBQYAAAAAAQABADsAAABGEwAAAAA=</con:data><con:id>9ea797e4-d2f8-485e-bde8-1f4d609207bd</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="e0db1c46-1736-49aa-b55b-86139c2a017b"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>Ac6fDyAKpq9JhXBkkMYNcq/+Qk/ESz4uW1FAdz33W64=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>GYnkdgVuZekOa4hqqjKpf+ZZK4WbD9BEjsI1tz7TdWXZDYK488m1fNYh3FguKmQOzmADWeqWdBLghx4/uNrRmw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>e0a7326c-3aba-11e5-95e2-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>e0a7326c-3aba-11e5-95e2-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://foiv3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>attach5MB.jpg</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>attach5MB.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:attach5MB.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>e0a7326c-3aba-11e5-95e2-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestNoAttach" searchProperties="true" id="e8152a54-02bf-4cd1-88ec-885cfc3a0160"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="d8cb3ba3-0b44-451b-b67e-4add35a14280"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA17</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="ac9b27da-b329-468b-b3e7-9139d3069a86"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="9aa056b7-5e1c-472c-a1dc-08a87b226a15"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="185fc0b5-feee-4376-a901-f9601d185c69"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="d7623871-40d0-4f9a-a69c-d598dda0e642"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="d2faeed8-7513-4a12-8f67-e909da6c9d39"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="05eda00a-f835-40a4-8876-43cc83fa8ed6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="da44bf0d-45c4-419e-af39-7e552ad0e318"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="d908a2cf-8fd1-487e-9a68-d93590569ee2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="af7cbe88-b455-4682-860b-a479870355fb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="5a0a74cb-b0ca-41ad-b9dc-52f8f9bc18f6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="16d3297e-5a41-426b-8246-9dcf5aee445f"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>zapros.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>210752</con:size><con:contentId>zapros.jpg</con:contentId><con:part>zapros.jpg</con:part><con:data></con:data><con:id>b1b13968-52d2-461c-8e1a-aa29adc2590c</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="e30ca03e-77b9-42c1-8446-7bce5473f6fe"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>Bx2sJh2fKgrKfkLEEqT88pqiLrlKz1i07gg9mv+Wlos=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>1y/wEhpd19SdjoD097anCuWi60xXDuqhFn7GfrbiDMTI43T+a4fGBf5dpMkmyhcKdNKg2k/GLh37iGXYKTksSQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>efe5cffd-7be9-11e5-ba90-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>efe5cffd-7be9-11e5-ba90-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>zapros.jpg</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>zapros.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:zapros.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>efe5cffd-7be9-11e5-ba90-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRequest" searchProperties="true" id="f52ec633-76e3-4688-b5ca-7078a19d5b86"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f83f9dfb-0968-49f3-9125-dfd98f24ac6e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="3c909a08-f692-4ffc-9192-d02fd3cc9e5d"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="f322fd47-415b-4129-ab4b-008861a281f2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="0fc6e1b3-27d8-4664-9cf6-84602895add3"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method

def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ba988d5f-b446-4bf1-a530-954657113c74"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetRequest" id="859ba3e5-794a-4844-a4fa-5850befa8a3f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetRequest" id="1b4b445f-11d0-4636-97cc-a8ab3b5db21c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="007c7992-1282-4938-988a-7669a9a4c194"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="a09afdd3-040d-471c-91ec-a67b1bec8c04"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>300</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>PHhhiW7IHnAQ7BXFJiKX86nQfHYs+j25D6vZDpSVRgtazPK/N4eoYFWm+vso0kbnm7BGAOhAeoEOqWKZvl3OZg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIKbjCCCh2gAwIBAgIKRtgxWAABAAABXjAIBgYqhQMCAgMwggEUMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSUwIwYDVQQJDBzRg9C7LiDQo9C00LDQu9GM0YbQvtCy0LAsIDg1MSAwHgYJKoZIhvcNAQkBFhF1Y0BuaWkudm9za2hvZC5ydTELMAkGA1UEBhMCUlUxGDAWBgNVBAgMDzc3INCc0L7RgdC60LLQsDEVMBMGA1UEBwwM0JzQvtGB0LrQstCwMScwJQYDVQQKDB7QpNCT0KPQnyDQndCY0JggItCS0L7RgdGF0L7QtCIxLDAqBgNVBAMMI9Cj0KYg0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMB4XDTE0MTEyNjEyMDIwMFoXDTE2MDIyNjEyMTIwMFowggINMRYwFAYFKoUDZAMSCzEzODMwNzQzMDUyMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSMwIQYJKoZIhvcNAQkBFhRkLm1ha2Fyb3ZAdm9za2hvZC5ydTELMAkGA1UEBhMCUlUxITAfBgNVBAgeGAA3ADcAIAQzAC4AIAQcBD4EQQQ6BDIEMDEVMBMGA1UEBx4MBBwEPgRBBDoEMgQwMSswKQYDVQQKHiIEJAQTBCMEHwAgBB0EGAQYACAAIgQSBD4EQQRFBD4ENAAiMTkwNwYDVQQLHjAEHgRCBDQENQQ7ACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8AIAQdBBgEFAAxADIxKzApBgNVBAMeIgQkBBMEIwQfACAEHQQYBBgAIAAiBBIEPgRBBEUEPgQ0ACIxMTAvBgNVBAkeKARDBDsALgAgBCMENAQwBDsETARGBD4EMgQwACwAIAQ0AC4AIAA4ADUxQzBBBgNVBAweOgQdBDAERwQwBDsETAQ9BDgEOgAgBD4EQgQ0BDUEOwQwACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8xKzApBgNVBCoeIgQUBDwEOARCBEAEOAQ5ACAEEAQ9BDQEQAQ1BDUEMgQ4BEcxFzAVBgNVBAQeDgQcBDAEOgQwBEAEPgQyMGMwHAYGKoUDAgITMBIGByqFAwICJAAGByqFAwICHgEDQwAEQDD90bmHwMzkxNM2vaJktp/15iSkKV7tUWBQKCWlZYR6/NJrK6VN3XxeuVTBQF3ZWI1073vOlk5kkU7wrtozTqSjggZQMIIGTDAOBgNVHQ8BAf8EBAMCBPAwJgYDVR0lBB8wHQYIKwYBBQUHAwQGByqFAwICIgYGCCsGAQUFBwMCMB0GA1UdDgQWBBTsEo0kMiqNvTo+8U/8dGJaJhIVojCCAVUGA1UdIwSCAUwwggFIgBRPPwRh10bRxpdEXUee1QXwuIzV0aGCARykggEYMIIBFDEYMBYGBSqFA2QBEg0xMDM3NzM5MjkwNjc2MRowGAYIKoUDA4EDAQESDDAwNzcwNDAwNzE1NzElMCMGA1UECQwc0YPQuy4g0KPQtNCw0LvRjNGG0L7QstCwLCA4NTEgMB4GCSqGSIb3DQEJARYRdWNAbmlpLnZvc2tob2QucnUxCzAJBgNVBAYTAlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxFTATBgNVBAcMDNCc0L7RgdC60LLQsDEnMCUGA1UECgwe0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMSwwKgYDVQQDDCPQo9CmINCk0JPQo9CfINCd0JjQmCAi0JLQvtGB0YXQvtC0IoIQEaXCzlfpiKFAzgNND7JESzCCAQAGA1UdHwSB+DCB9TAuoCygKoYoaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDEudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMC+gLaArhilodHRwOi8vcGtpLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAuoCygKoYoaHR0cDovL3JhLnZvc2tob2QucnUvY2RwL3Zvc2tob2QyMDE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDMudm9za2hvZC5ydS9jZHAvdm9za2hvZDIwMTQuY3JsMIIBpQYIKwYBBQUHAQEEggGXMIIBkzAuBggrBgEFBQcwAYYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjAuBggrBgEFBQcwAoYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjA7BggrBgEFBQcwAoYvaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly91Yy52b3NraG9kLnJ1L2NkcC9jcm9zcy12b3NraG9kLTIwMTQtMi5jcnQwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMjAxNC0yLmNydDA1BggrBgEFBQcwAoYpaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QtMjAxNC5jcnQwKwYDVR0QBCQwIoAPMjAxNDExMjYxMjAyMDBagQ8yMDE1MTEyNjEyMDIwMFowMgYJKwYBBAGCNxUKBCUwIzAKBggrBgEFBQcDBDAJBgcqhQMCAiIGMAoGCCsGAQUFBwMCMB0GA1UdIAQWMBQwCAYGKoUDZHEBMAgGBiqFA2RxAjA2BgUqhQNkbwQtDCsi0JrRgNC40L/RgtC+0J/RgNC+IENTUCIgKNCy0LXRgNGB0LjRjyAzLjYpMIIBMwYFKoUDZHAEggEoMIIBJAwrItCa0YDQuNC/0YLQvtCf0YDQviBDU1AiICjQstC10YDRgdC40Y8gMy42KQxTItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuCAxLjUMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjQtMjIzOCDQvtGCIDA0LjEwLjIwMTMMT9Ch0LXRgNGC0LjRhNC40LrQsNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjRjyDihJYg0KHQpC8xMjgtMjM1MSDQvtGCIDE1LjA0LjIwMTQwCAYGKoUDAgIDA0EAGYcJfywlnDx2aVjrR218sUfJ0vzjBjNhymmOSmag73NBNy3UOS2JNZM4f29s1bvBNSiDkqO3m2bd/yTSH1a4DQ==</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Ack" searchProperties="true" id="d5c99ad0-193f-4e66-be10-5c377e2dc887"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="bd66c25a-443a-422d-b272-93fb69eff894"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>messageId</con:name><con:value>10879a70-4a41-11e5-89b2-d4c9eff07b77</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="f4927cc2-bc34-4484-99f8-cbb345be006f"><con:settings/><con:config><script>def xml = '&lt;ns2:AckTargetMessage xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER" accepted="true">'+context.expand ('${messageId}') + '&lt;/ns2:AckTargetMessage>'
</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="a30c019c-ba59-4e65-8881-6d965d1d7c60"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="f8ea49da-44ac-45cd-a40e-b630d653b8e1"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="35cd52dc-d15b-4143-8add-a739eb90171b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Ack1" disabled="true" id="c7e70ad8-b419-478c-b7a8-dfb8b77c6536"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="Ack1" id="c27c9a14-d6a3-427b-83d7-89678c18f55a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="4aedaac3-43f6-4abd-af03-97d2d9c323fb"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Ack" id="4e9c0253-3bd5-453b-a881-6daf9c6e69ad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>Ack</con:operation><con:request name="Ack" id="a85e771b-d39c-432b-a1a4-8f9d96bfddb7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fbdd2bb4-91cf-4b77-94ae-b7e6970c0fff"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>rmSNvjncRdUiJzZP3g5fshkAoYGddLnhIxcNjsaUuTY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>ByIpWTzwwIMvWmrhjsDgqUObjk5WhikOE/7pWy0CPVCw1IHB6bx4ja0UetREA8Fu3elMQ5P38zBGo6hi1/2hzg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:AckTargetMessage xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER" accepted="true">9dee7cc1-3a82-11e5-b5f6-d4c9eff07b77&lt;/ns2:AckTargetMessage></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendResponse" searchProperties="true" id="968e7d58-2cbb-4e45-8973-b977b4ecb53c"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="f1eba333-2939-473f-83b8-ddc019c2cfa5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataResponse xmlns:ns1="urn://pa/demo3/1.0.0">&lt;ns1:Response>Ответ&lt;/ns1:Response>&lt;/ns1:DataResponse></con:value></con:property><con:property><con:name>to</con:name><con:value>1039|pa_demo3_1.0.0_DataRequest|c21fa048-5311-11e5-b0a3-6a747ff74203|c21fa048-5311-11e5-b0a3-6a747ff74203</con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>IS1</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>qweasd</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>otvet.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>91522f35-1599-11e5-9ee5-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isRequestRejected</con:name><con:value>false</con:value></con:property><con:property><con:name>rejectionReasonCode</con:name><con:value>UNKNOWN_REQUEST_DESCRIPTION</con:value></con:property><con:property><con:name>rejectionReason</con:name><con:value>Человекочитаемая причина отказа</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="ecf04d18-93aa-49ca-9df8-41288e93bb06"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="4515f701-0681-4141-9d80-822a7c507ff1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedResponseData" id="3953707d-96a6-49f8-91ce-7bd65b1695c7"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

xml ='<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns1="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:To>'+context.expand ('${to}')+'</ns:To>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns1:RefAttachmentHeader>'
	result = result+'		<ns1:uuid>'+fuuid+'</ns1:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns1:Hash>'+res[0]+'</ns1:Hash>'
	result = result+'		<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
	result = '	<ns1:AttachmentHeader>'
	result = result+'	<ns1:contentId>'+file+'</ns1:contentId>'
	result = result+'	<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:AttachmentHeader>'
}


if(context.expand ('${isRequestRejected}').toBoolean()){
	def rejectionReasonCode = context.expand ('${rejectionReasonCode}').split(";")
	def rejectionReason = context.expand ('${rejectionReason}').split(";")
	for(int i=0;i<rejectionReasonCode.length;i++){
		xml=xml+'	<ns:RequestRejected>'
		xml=xml+'	<ns:RejectionReasonCode>'+rejectionReasonCode[i]+'</ns:RejectionReasonCode>'
		xml=xml+'	<ns:RejectionReason>'+rejectionReason[i]+'</ns:RejectionReason>'
		xml=xml+'	</ns:RequestRejected>'
	}
} else {
	xml=xml+'	<ns1:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns1:MessagePrimaryContent>'
	if(context.expand ('${isPersonalSignature}').toBoolean()){
		xml=xml+'	<ns:PersonalSignature>'
		def sign = ""
		Map map = new HashMap()
		map.put('path','/smev/xmlSign')
		Map reqMap = new HashMap()
		reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
		reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
		reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
		reqMap.put('certName',context.expand ('${certNameSP}'))
		reqMap.put('certPass',context.expand ('${certPasswordSP}'))
		map.put('body', reqMap)
		http.post(map) { resp ->
			sign = "${resp.entity.content.text}"
		}
		xml = xml +sign+'</ns:PersonalSignature>'
	}

	// Обработка вложений
	def isAttachments = context.expand ('${isAttachment}').toBoolean()
	def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()
	
	// Обработка MTOM-вложений
	if (isAttachments && !isFtpAttachments) {
		def idAttachments = context.expand ('${idAttachment}').split(";")
		def mimeTypes = context.expand ('${mimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml=xml+'	<ns1:AttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
			}
			xml=xml+'	</ns1:AttachmentHeaderList>'
		}
	}
	
	// Обработка FTP-вложений
	if (isAttachments && isFtpAttachments) {
		idAttachments = context.expand ('${ftpAttachment}').split(";")
		mimeTypes = context.expand ('${ftpMimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml = xml + '	<ns1:RefAttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
			}
			xml = xml + '	</ns1:RefAttachmentHeaderList>'
		}
	}
}
	
xml=xml+'</ns:SenderProvidedResponseData>'
]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="f4959864-5f0f-487d-acbf-5313c054d558"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sender</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedResponseData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="d4d83cf8-71eb-4300-81fd-088831217444"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def request = testRunner.testCase.getTestStepByName( "SendResponse" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}
return xml
//log.info xml
]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="0047b389-8c35-4c1c-9cd3-17fe20b3f19d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachment</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="f5ddf019-6ac1-480f-85ad-eb10f7b94546"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5a4d8192-6602-492c-b5a9-c1f766346acf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendResponse" id="a0ed2a59-22b8-482e-98e7-c3d1a46177bc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendResponse</con:operation><con:request name="SendResponse" id="7937c7ce-0e64-453b-97ea-e7fa541e9c70"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="17ff3e72-68c4-4a63-b3e5-c4c8ee198950"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>otvet.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>480913</con:size><con:contentId>otvet.jpg</con:contentId><con:part>otvet.jpg</con:part><con:data></con:data><con:id>525f0f87-321d-46d5-9928-04afb89b4faf</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_PROVIDER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>PncBAHo3ZktWTIStl5CqhBbX4nRMoE2XHQj3JunE1U4=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>/sngUp1Rg1XkG0QDQzmwTW8b8iYBZHnMjanQLYSVFFeMLXV5WxyetKQLhDzYzZZLZSVKZ+SZyFqBl1k9H+Yw7w==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>ee5168b8-5311-11e5-ae4d-d4c9eff07b77</ns:MessageID><ns:To>1039|pa_demo3_1.0.0_DataRequest|c21fa048-5311-11e5-b0a3-6a747ff74203|c21fa048-5311-11e5-b0a3-6a747ff74203</ns:To>	<ns1:MessagePrimaryContent><ns1:DataResponse xmlns:ns1="urn://pa/demo3/1.0.0"><ns1:Response>Ответ</ns1:Response></ns1:DataResponse></ns1:MessagePrimaryContent>	<ns1:AttachmentHeaderList>	<ns1:AttachmentHeader>	<ns1:contentId>otvet.jpg</ns1:contentId>	<ns1:MimeType>image/jpeg</ns1:MimeType>	<ns1:SignaturePKCS7>MIICrwYJKoZIhvcNAQcCoIICoDCCApwCAQExDDAKBgYqhQMCAgkFADALBgkqhkiG9w0BBwGgggF0MIIBcDCCAR2gAwIBAgIEH4DHpDAKBgYqhQMCAgMFADAtMRAwDgYDVQQLEwdTWVNURU0xMQwwCgYDVQQKEwNJUzExCzAJBgNVBAYTAlJVMB4XDTE1MDUwNzA5MzEyOFoXDTE4MDUwNjA5MzEyOFowLTEQMA4GA1UECxMHU1lTVEVNMTEMMAoGA1UEChMDSVMxMQswCQYDVQQGEwJSVTBjMBwGBiqFAwICEzASBgcqhQMCAiMBBgcqhQMCAh4BA0MABEAenuQyd7r9HeV4gEbqkIqTRTr2mwu5t+ad9lnflN5X8wa/zeIt8QX81HO9//oRL2O6568vO0sBt9qmgjYfKdtnoyEwHzAdBgNVHQ4EFgQUFOEyCXHT/XPYY/k4jWsMPBU2aDwwCgYGKoUDAgIDBQADQQDjjtwVbiPy+606eY3ux8adbAOn2tTkC30F2t1BjP0+gjY5eewh9TJAF9+0sISJqCvhz46PDxmxxOg8Sf+OcqyHMYIBAjCB/wIBATA1MC0xEDAOBgNVBAsTB1NZU1RFTTExDDAKBgNVBAoTA0lTMTELMAkGA1UEBhMCUlUCBB+Ax6QwCgYGKoUDAgIJBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNTA5MDQxNDI5MzRaMC8GCSqGSIb3DQEJBDEiBCAL6kl87Y9xlPoXPFYqukSsamAqaiU8WgAmHOGIARY/mjAKBgYqhQMCAhMFAARAlLvUMgXWUEXwOQgLzeRsMTyCQzxb/pEjSG/10SUFjBEVkSCiIjkbMQdC043NwEr09TD6nyMCNBaG+rN3JvzLlw==</ns1:SignaturePKCS7>	</ns1:AttachmentHeader>	</ns1:AttachmentHeaderList></ns:SenderProvidedResponseData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>otvet.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:otvet.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>ee5168b8-5311-11e5-ae4d-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetResponse" searchProperties="true" id="d2cc6dda-af7a-48e2-a07c-ae7867f603db"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="7415d975-e942-4dc6-a05a-f5a04d1a268f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="89a4536b-abb2-4f51-b3ef-9529820cde39"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="0c25fad1-f7a4-4b06-b53b-f9f6f137f931"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="52512a33-3f57-4df5-9e18-96fd40f1c4be"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="023ecc8b-56fc-4f38-b749-b7b1479355c3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetResponse" id="f499933b-6567-43ff-aa3d-26ced0855b2c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetResponse" id="a51bfee3-85fe-426d-ac4c-b945ce0c61c5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetResponseRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b458ae28-ff3f-43ad-af33-5d39cdf077a9"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>HkE0iSKnAFAlahqqB5EVQBDmRKA+rdX1C54hdrMMAYRmUj7/mnPHDH+eT1aGK1GRNqVQODrmnHkBCRKb3c9A5A==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetIncomingQueueStatistics" searchProperties="true" id="ff041883-ba64-4e1b-91ad-65bf2e0ef730"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="4d985dc6-7504-4150-b953-735e6fd5f1da"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>IS1</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>qweasd</con:value></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-20T12:30:23.544+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="27d794a6-b38c-40c0-85ce-6dfa876e52af"><con:settings/><con:config><script>def xml = '&lt;ns1:Timestamp Id="SIGNED_BY_CONSUMER" xmlns:ns1="'+context.expand ('${#TestSuite#ns2}')+'">'+context.expand ('${BusinessProperties#timestamp}') + '&lt;/ns1:Timestamp>'</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="ff8a5c3a-8ad1-4391-9372-c1357440cdda"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="0438c552-41a4-4ee6-8ba5-fff6bf64d94a"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ac248245-f8ec-4426-8fe7-05b63455ec50"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetIncomingQueueStatistics" id="2d58bc09-dbe5-4da4-afd7-f8cef6e103e3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetIncomingQueueStatistics" id="73510393-e2b5-4306-a2c1-5fa83d8bb8cc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:GetIncomingQueueStatisticsRequest>
      ${#TestCase#genXML}      
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:GetIncomingQueueStatisticsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3ffe16ba-33a0-4233-8a06-2f5173ab4b8d"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>42tGUKeSfeUar2yb52GsvaAeFrn34zkyS4JNEcMVzDc=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>zeMO4pOFuKVqawlIXrhrwA2t8dqVOJAI3ExgLYvtdXMu+MgTzznBvIhlmZo/f1GPrvyzz4cP5HS2r1GR3P+Bww==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIBcDCCAR2gAwIBAgIEH4DHpDAKBgYqhQMCAgMFADAtMRAwDgYDVQQLEwdTWVNURU0xMQwwCgYDVQQKEwNJUzExCzAJBgNVBAYTAlJVMB4XDTE1MDUwNzA5MzEyOFoXDTE4MDUwNjA5MzEyOFowLTEQMA4GA1UECxMHU1lTVEVNMTEMMAoGA1UEChMDSVMxMQswCQYDVQQGEwJSVTBjMBwGBiqFAwICEzASBgcqhQMCAiMBBgcqhQMCAh4BA0MABEAenuQyd7r9HeV4gEbqkIqTRTr2mwu5t+ad9lnflN5X8wa/zeIt8QX81HO9//oRL2O6568vO0sBt9qmgjYfKdtnoyEwHzAdBgNVHQ4EFgQUFOEyCXHT/XPYY/k4jWsMPBU2aDwwCgYGKoUDAgIDBQADQQDjjtwVbiPy+606eY3ux8adbAOn2tTkC30F2t1BjP0+gjY5eewh9TJAF9+0sISJqCvhz46PDxmxxOg8Sf+OcqyH</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns1:Timestamp Id="SIGNED_BY_CONSUMER" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">2014-02-20T12:30:23.544+04:00&lt;/ns1:Timestamp></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendResponseReject" searchProperties="true" id="1b1a4c69-596a-4fce-8417-445b35f35cdd"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="d0f9232f-7b79-4f45-ad0e-2999dbc7eb57"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataResponse xmlns:ns1="urn://pa/pa_pokaz1/1.0.2">                 &lt;ns1:Response>Ответ&lt;/ns1:Response> &lt;/ns1:DataResponse> </con:value></con:property><con:property><con:name>to</con:name><con:value>1108|x-artefacts-gibdd-gov-ru_breach_root_1.0_BreachRequest|7bc87d7d-14dc-11e5-9ee5-d4c9eff07b77|6bc87d7d-14dc-11e5-9ee5-d4c9eff07b77</con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>IS1</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>qweasd</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>IS1</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>qweasd</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>otvet.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>b29fbe59-7495-11e4-b070-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isRequestRejected</con:name><con:value>true</con:value></con:property><con:property><con:name>rejectionReasonCode</con:name><con:value>NO_DATA</con:value></con:property><con:property><con:name>rejectionReasonDescription</con:name><con:value>Человекочитаемая причина отказа</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="40753c9d-e759-4ff0-8013-4f5e2ea24416"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="c4f8cd81-d270-43f9-b50e-9e0f1a9d894e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedResponseData" id="df0c04db-cb27-4749-aa7f-612b00015d28"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

xml ='<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns1="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:To>'+context.expand ('${to}')+'</ns:To>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns1:RefAttachmentHeader>'
	result = result+'		<ns1:uuid>'+fuuid+'</ns1:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns1:Hash>'+res[0]+'</ns1:Hash>'
	result = result+'		<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
	result = '	<ns1:AttachmentHeader>'
	result = result+'	<ns1:contentId>'+file+'</ns1:contentId>'
	result = result+'	<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:AttachmentHeader>'
}


if(context.expand ('${isRequestRejected}').toBoolean()){
	def rejectionReasonCode = context.expand ('${rejectionReasonCode}').split(";")
	def rejectionReason = context.expand ('${rejectionReasonDescription}').split(";")
	for(int i=0;i<rejectionReasonCode.length;i++){
		xml=xml+'	<ns:RequestRejected>'
		xml=xml+'	<ns:RejectionReasonCode>'+rejectionReasonCode[i]+'</ns:RejectionReasonCode>'
		xml=xml+'	<ns:RejectionReasonDescription>'+rejectionReason[i]+'</ns:RejectionReasonDescription>'
		xml=xml+'	</ns:RequestRejected>'
	}
} else {
	xml=xml+'	<ns1:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns1:MessagePrimaryContent>'
	if(context.expand ('${isPersonalSignature}').toBoolean()){
		xml=xml+'	<ns:PersonalSignature>'
		def sign = ""
		Map map = new HashMap()
		map.put('path','/smev/xmlSign')
		Map reqMap = new HashMap()
		reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
		reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
		reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
		reqMap.put('certName',context.expand ('${certNameSP}'))
		reqMap.put('certPass',context.expand ('${certPasswordSP}'))
		map.put('body', reqMap)
		http.post(map) { resp ->
			sign = "${resp.entity.content.text}"
		}
		xml = xml +sign+'</ns:PersonalSignature>'
	}

	// Обработка вложений
	def isAttachments = context.expand ('${isAttachment}').toBoolean()
	def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()
	
	// Обработка MTOM-вложений
	if (isAttachments && !isFtpAttachments) {
		def idAttachments = context.expand ('${idAttachment}').split(";")
		def mimeTypes = context.expand ('${mimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml=xml+'	<ns1:AttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
			}
			xml=xml+'	</ns1:AttachmentHeaderList>'
		}
	}
	
	// Обработка FTP-вложений
	if (isAttachments && isFtpAttachments) {
		idAttachments = context.expand ('${ftpAttachment}').split(";")
		mimeTypes = context.expand ('${ftpMimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml = xml + '	<ns1:RefAttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
			}
			xml = xml + '	</ns1:RefAttachmentHeaderList>'
		}
	}
}
	
xml=xml+'</ns:SenderProvidedResponseData>'
]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="d87da4e2-bf8c-4d37-977a-df1868a88d90"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sender</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedResponseData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="74f487eb-a0a9-4b93-a8b7-7cc4d17a1b5e"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def request = testRunner.testCase.getTestStepByName( "SendResponse" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}
return xml
//log.info xml
]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="2da45cc9-abdf-4865-97cb-68f2d09f1919"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachment</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="1342c9f5-f3b9-4715-81c1-34dd75e7eae4"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="40581dcc-23c2-4819-a32f-886a4093e950"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendResponse" id="1885db33-2ce1-4c6e-836d-a807104dc125"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendResponse</con:operation><con:request name="SendResponse" id="5e6f679b-7a99-4877-8eb1-1f49599c70b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3e0cef50-cd7b-4d82-b49e-21e84aa4db4c"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_PROVIDER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>IW0wdRXiI0WwuGnjxmMwRYs6dNVG9qZ6JQL1/ofYKFo=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>vZIKROG+EpVSXvafzkqWpZzXTqGefyT9H7N2T7ThQgDY0s9GEt+yM+zDfYKAZsokyiXwyTWAfzHlj4x/4T8ScA==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIBcDCCAR2gAwIBAgIEH4DHpDAKBgYqhQMCAgMFADAtMRAwDgYDVQQLEwdTWVNURU0xMQwwCgYDVQQKEwNJUzExCzAJBgNVBAYTAlJVMB4XDTE1MDUwNzA5MzEyOFoXDTE4MDUwNjA5MzEyOFowLTEQMA4GA1UECxMHU1lTVEVNMTEMMAoGA1UEChMDSVMxMQswCQYDVQQGEwJSVTBjMBwGBiqFAwICEzASBgcqhQMCAiMBBgcqhQMCAh4BA0MABEAenuQyd7r9HeV4gEbqkIqTRTr2mwu5t+ad9lnflN5X8wa/zeIt8QX81HO9//oRL2O6568vO0sBt9qmgjYfKdtnoyEwHzAdBgNVHQ4EFgQUFOEyCXHT/XPYY/k4jWsMPBU2aDwwCgYGKoUDAgIDBQADQQDjjtwVbiPy+606eY3ux8adbAOn2tTkC30F2t1BjP0+gjY5eewh9TJAF9+0sISJqCvhz46PDxmxxOg8Sf+OcqyH</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>1ac2e3b6-158d-11e5-9ee5-d4c9eff07b77</ns:MessageID><ns:To>1108|x-artefacts-gibdd-gov-ru_breach_root_1.0_BreachRequest|7bc87d7d-14dc-11e5-9ee5-d4c9eff07b77|6bc87d7d-14dc-11e5-9ee5-d4c9eff07b77</ns:To>	<ns:RequestRejected>	<ns:RejectionReasonCode>NO_DATA</ns:RejectionReasonCode>	<ns:RejectionReasonDescription>Человекочитаемая причина отказа</ns:RejectionReasonDescription>	</ns:RequestRejected></ns:SenderProvidedResponseData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>1ac2e3b6-158d-11e5-9ee5-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRequest_FOIV3" searchProperties="true" id="c05dec4d-7737-4938-8bb7-a0bd30a4207d"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="2cd2495b-9093-43a0-aafb-4142f3a2a4b1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA16</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>namespaceURI</con:name><con:value/></con:property><con:property><con:name>rootElementLocalName</con:name><con:value/></con:property><con:property><con:name>timestamp</con:name><con:value>2014-02-11T17:10:03.616+04:00</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="222c8ec3-15be-4cf0-a4ae-62d948d439f7"><con:settings/><con:config><script><![CDATA[def xml = '<ns2:MessageTypeSelector xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER">'
if (context.expand ('${namespaceURI}') != '' && context.expand ('${rootElementLocalName}') != '') {
	xml = xml + '<ns2:NamespaceURI>'+context.expand ('${namespaceURI}')+'</ns2:NamespaceURI>'
	xml = xml + '<ns2:RootElementLocalName>'+context.expand ('${rootElementLocalName}')+'</ns2:RootElementLocalName>'
}
xml = xml + '<ns2:Timestamp>'+context.expand ('${timestamp}')+'</ns2:Timestamp>'
xml = xml + '</ns2:MessageTypeSelector>']]></script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="da4e2428-0b8a-482e-9c25-67d21b31ffe4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="4d084e29-a964-4114-a48a-1e5c0305b4c8"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method

def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="1640cacc-dc1c-4659-87de-e77cbca54a35"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetRequest" id="f7bf4db2-d715-4d0e-8640-01425e95f84a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="GetRequest" id="fa97ce9e-3391-47e6-8f5f-9dbfbb430b59"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xop+xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
		      <ns:GetRequestRequest>
		         ${#TestCase#genXML}
		         <!--Optional:-->
		         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
		      </ns:GetRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="50de7492-c3c1-4ecc-a7e3-35631dcb702d"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="50976fc7-4eb6-48d2-96ad-570441102d5e"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>300</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>+jgFM6k/s+yoBBSj0yl/Y1XGBrmPLtIafDWpDACqnt8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>pmc5XDSbBMzpSJD+2yByXUB+yLlRKnzSgiwpnFair6725O6abHcrbRgB0erA0AdJVAUGKnzxYxzSXEtIBFAYtg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:MessageTypeSelector xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER">&lt;ns2:Timestamp>2014-02-11T17:10:03.616+04:00&lt;/ns2:Timestamp>&lt;/ns2:MessageTypeSelector></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Ack_FOIV3" searchProperties="true" id="7deeb316-18d0-407c-9ffc-34cd8eba6525"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="92beb3fa-abe2-4101-b635-6c2100fe0542"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>certNameOV</con:name><con:value>MakarovDA16</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>messageId</con:name><con:value>1e8c5053-3788-11e5-ba68-d4c9eff07b77</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="genXML" id="feedaa99-f3b7-4cdb-b15f-05572a4df721"><con:settings/><con:config><script>def xml = '&lt;ns2:AckTargetMessage xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" Id="SIGNED_BY_CALLER" accepted="true">'+context.expand ('${messageId}') + '&lt;/ns2:AckTargetMessage>'
</script></con:config></con:testStep><con:testStep type="transfer" name="genXML to Param" id="819e29fa-12ff-48ad-a36d-45b7f8dcd913"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>genXML</con:name><con:sourceType>result</con:sourceType><con:sourceStep>genXML</con:sourceStep><con:targetType>genXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="03a3e19e-6443-44e9-b205-4f996155d37f"><con:settings/><con:config><script>import java.net.URLEncoder
def sign = context.expand ('${#TestSuite#signServiceUrl}')+
			'smev/xmlSign?xmlBase64='+ URLEncoder.encode(testRunner.testCase.getPropertyValue( "genXML" ).bytes.encodeBase64().toString(),"UTF8")+
			'&amp;url='+context.expand ('${#TestSuite#connectionURL}') + 
			'&amp;storeName='+context.expand ('${#TestSuite#storeName}') +
			'&amp;certName='+context.expand ('${certNameOV}') +
			'&amp;certPass='+context.expand ('${certPasswordOV}')
sign.toURL().text</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="77e65f02-f60a-4824-8a0d-7ce65b24d051"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Ack1" disabled="true" id="a991ea51-66bb-4e96-9ea6-e2b1aa1a8462"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>GetRequest</con:operation><con:request name="Ack1" id="614954d0-1d8f-405d-b57d-6f83e86d4f1d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.1" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.1">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9b2a1e57-c5ca-4f5b-8e4a-65514a75fd3d"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Ack" id="5fb2efff-eaa7-45c0-aad9-7d8bdc005da2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>Ack</con:operation><con:request name="Ack" id="0a3e55ab-8359-482d-83da-9006a1aa485e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:AckRequest>
         ${#TestCase#genXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:AckRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b7f21675-6028-4066-8c93-f7389ceee51b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CALLER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>xJc8p896cJMmMM+oRtQEip19XGTM3dbQaVYLNfebJfI=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>lh53F3W2+kLOoGBqAQDE8z0BmbYfB4TyeXdvCrj/Gkdga15YHSI8Qt507bKqdvXemDTQaca8uLqERc44+dWxGQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>genXML</con:name><con:value>&lt;ns2:AckTargetMessage xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" Id="SIGNED_BY_CALLER" accepted="true">1e8c5053-3788-11e5-ba68-d4c9eff07b77&lt;/ns2:AckTargetMessage></con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequest_FTP (>1GB)" searchProperties="true" id="9d57db04-4b3f-4819-8ce9-a350868b7435" timeout="2700000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="properties" name="BusinessProperties" id="48358b32-57cc-4251-bb71-ea5b38da6675"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>d5b5e86e-4cb8-11e5-a10f-d4c9eff07b77/data1_2GB.txt</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg;image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="11db13d8-982c-4aee-a724-81269e7426f6"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="8f6d669a-5fef-43fb-aa61-e9a8f678d989"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="44933c9a-dce1-4f7c-ae19-4de797739a77"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="6711e147-4ff1-4448-b328-cf625d70d46f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="3c666857-f94a-455c-b25a-b65c435562ac"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="66b4b501-dcf1-46dc-bb3a-69304b67ea23"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="ed895f30-0c47-4b4d-a915-60f66d287497"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="a0bb0764-3e5f-46fb-8f91-1f6ac52f8481"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="7183356c-2d6b-497b-8eea-e730675ba7d8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="84787e1f-dc9b-4c61-b8d6-1a6d7eb5f817"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2e47d362-9926-4f6c-8998-014a4b625287"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="b89bc6ff-a100-4b03-a2d8-0a1ebb3d863e"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>x7stIh9PV6G6w0IL+QvyFrBIJNgQ29E95aZzQrrESlg=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>BAHZ/OSQkbMUEuO3yNoKZWxCwI3cGP5PDiHDVRgB//VUrtRppwG4EpxO43w4O7vUXu6LKv5dDmyeErbGUEmHYw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>208170d5-4cba-11e5-a10f-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>208170d5-4cba-11e5-a10f-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:RefAttachmentHeaderList>	<ns2:RefAttachmentHeader>		<ns2:uuid>d5b5e86e-4cb8-11e5-a10f-d4c9eff07b77</ns2:uuid>		<ns2:Hash>OfW/rcDV2tS76c4omZ7Sfe9+frPSXdDDTPpCRtjtp/4=</ns2:Hash>		<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:RefAttachmentHeader>	</ns2:RefAttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>208170d5-4cba-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtp(>1GB)" searchProperties="true" timeout="2700000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="df3d86b4-e4af-46fc-84a6-7ad776fd2bdc"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="e158c91a-f303-4aee-9a2e-92674a931304"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data1_2GB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="1f34679e-fd67-4d0d-8e90-42d48e111325"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="a03d8a82-3749-4759-8079-5bab2ced497c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="4572a52a-5bae-4119-bd93-2bc7dc10b171"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()
ftpClient.setType(FTPClient.TYPE_BINARY)
def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 2700000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">d5b5e86e-4cb8-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtpTimeout" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="104f2689-f8e6-4e9e-b846-554f6f0e7472"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="1b78af45-48ac-46ca-8b62-5aa8326d8b22"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value>500</con:value></con:property><con:property><con:name>fileUuid</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="e090a5bc-d2fd-451b-a8c3-eedac0f4c894"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="161f75e7-d317-4562-ac0d-d02ad38a0668"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="d7dc10d3-308e-49d3-953b-e647b06c7a64"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()

ftpClient.setType(FTPClient.TYPE_BINARY);

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.setType(FTPClient.TYPE_BINARY);

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">915218e6-4cbb-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PutFileFtpFileID" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6eb90767-2de7-45d6-bfc8-b61ffbe197ff"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="4829ea1d-64f2-412f-9179-907c4fdc5262"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data10MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value>466442c9-4cb7-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="0b82cfa5-9853-4da5-89b0-1cc58b67e5ba"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = context.expand ('${#fileUuid}')

if ( uuid.replaceAll("\\s","") == '' ) {
	uuid = uuidGenerator.generate()
}</script></con:config></con:testStep><con:testStep type="transfer" name="uuidToParam" id="5582d375-f77c-42a5-bfb1-2662f0dce2c8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>uuid</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>uuid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="PutFileFtp" id="557edde4-6154-42a4-9257-90ca2f31c0ab"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security. MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${#TestSuite#ftpLogin}')
def password = context.expand ('${#TestSuite#ftpPassword}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
filePath = groovyUtils.getProjectPath() + '\\smev\\file\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()
ftpClient.setType(FTPClient.TYPE_BINARY);

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)

ftpClient.connect(address, port);
ftpClient.login("anonymous", "ftp4j");
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 300000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если указан uuid файла - продолжим загрузку,
// если uuid пустой - загрузим файл
if(context.expand ('${fileUuid}') != ""){
	if (ftpClient.isResumeSupported()) {
		ftpClient.changeDirectory(context.expand ('${fileUuid}'))
		offset = ftpClient.fileSize("/"+context.expand ('${fileUuid}') + "/" + fileName)
		ftpClient.upload(file, offset)
	} else {
		testRunner.fail("FAILED")
		return "Upload - дозагрузка не поддерживается сервером"
	}
} else {
	ftpClient.createDirectory(uuid)
	ftpClient.changeDirectory(uuid)
	ftpClient.upload(file)
}

return uuid + '/' + fileName</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetFileTimeout" searchProperties="true" timeout="60000" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5bea3792-649d-4ec1-bd68-9889cae4b007"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="94bd353c-390d-4f2b-8c12-600994760ae1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fileName</con:name><con:value>data500MB.txt</con:value></con:property><con:property><con:name>wait</con:name><con:value/></con:property><con:property><con:name>fileUuid</con:name><con:value>612651b1-4cb9-11e5-a10f-d4c9eff07b77</con:value></con:property><con:property><con:name>login</con:name><con:value>gtXZsXsO3tzNSnOaotj6Cxhai17WSD</con:value></con:property><con:property><con:name>password</con:name><con:value>bYVpo3ypWPBEWEtbReZJo7jQXcHQPg</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="GetFileFtp" id="81670ccd-eca3-4245-a3d0-094f3c418315"><con:settings/><con:config><script>import it.sauronsoftware.ftp4j.*
import  java.security.MessageDigest

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def address = context.expand ('${#TestSuite#ftpUrl}')
def port = context.expand ('${#TestSuite#ftpPort}').toInteger()
def login = context.expand ('${login}')
def password = context.expand ('${password}')

def uuid = context.expand ('${#TestCase#uuid}')
def fileName = context.expand ('${#fileName}')
def filePath = groovyUtils.getProjectPath() + '\\smev\\downloads\\'

def file = new File(filePath + fileName)

def ftpClient = new FTPClient()
ftpClient.setType(FTPClient.TYPE_BINARY);

ftpClient.connect(address, port);
ftpClient.login(login, password);
if (ftpClient.isCompressionSupported()) {
	ftpClient.setCompressionEnabled(true)
}

// Таймаут в 300 секунд для обрыва соединения, в случае зависания скрипта.
def timeout = 100000

if (context.expand ('${wait}') != "") {
	if (context.expand ('${wait}').toInteger() > 0) {
		timeout = context.expand ('${wait}').toInteger()
	}
}

def ftpInterrupt = Thread.start {
	// ждем указанное кол-во миллисекунд
	sleep timeout
	// потом прерываем сессию загрузки
	// true - корректное прерывание загрузки (ABOR)
	// false - имитирует обрыв соединения
	ftpClient.abortCurrentDataTransfer(false)
}

// Если был обрыв связи, продолжим загрузку с места обрыва
// Размер файла на ФТП

def localFileSize = 0
if (file.exists()) {
	localFileSize = file.size()
}

def ftpFileSize = 0
if(context.expand ('${fileUuid}') != ""){
	//ftpClient.changeDirectory(context.expand ('${fileUuid}'))
	ftpFileSize = ftpClient.fileSize(fileName)
}

if (ftpFileSize > localFileSize) {
	ftpClient.download(fileName, file, localFileSize)
}

def generateMD5(final file) {
   MessageDigest digest = MessageDigest.getInstance("MD5")
   file.withInputStream(){is->
   byte[] buffer = new byte[8192]
   int read = 0
      while( (read = is.read(buffer)) > 0) {
             digest.update(buffer, 0, read);
         }
     }
   byte[] md5sum = digest.digest()
   BigInteger bigInt = new BigInteger(1, md5sum)
   bigInt.toString(16).padLeft(32, '0')
}

log.info fileName + ": " + generateMD5(file)
</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>e3103454-cc8a-11e3-ac85-2c44fd1010cf</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu" searchProperties="true" id="d064f8ca-0b19-4265-9ec4-b08c4c729a75"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="98afc644-ebe1-48eb-8db9-cca519dbdf79"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="dec75f51-56ef-41bd-99b9-ecfb8143ddcb"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="8a353bd2-3dc9-4ae7-93c0-a38e06fc1678"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="68ff86b5-7481-4f48-90c4-494df514b150"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="b0749e03-acef-46c4-9c28-4a2551871ca9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="c900157d-60d6-4658-bb54-ad1e516e4521"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="cb04fe83-8975-422b-8110-234dca874be0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="150bb152-e04f-4d75-b71a-361c8df2e4fb"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="5a00b260-bba5-4d1f-9e76-47169e0519dc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="b16ee18e-66e7-4bae-bae7-3f123839847e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="085d35ae-d634-40e4-b5ad-053238c0189b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="27f1a6a2-d8d3-41de-bc89-2ee8ee03e29b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="0be63236-a56e-4b3b-aaeb-a749284919e2"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>zA3M2a+9zqToUeyIKEb8oZ9Ph5s1lRr7ZgYmVx3HmDA=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>QaoLsZW+PMvP8UmX64wL/F23sZBHBFy/eOkZBBtIzUzPO22D0ayGn0FWLhvylzu/FXx9cb2uGXYQa49TXafpfQ==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>85c92a5b-553c-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>85c92a5b-553c-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>85c92a5b-553c-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu2" searchProperties="true" id="e05b5390-036b-4c1b-87c0-c2d8aa4b7af8"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="d0a069e7-194b-42b5-95e5-d66e3226a147"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос1&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="b3626e25-87df-4acf-b05f-f23f371bb542"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="87cb7677-fd84-4068-b4f5-872f0421616a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="90ffc8ad-73f5-49e3-9a43-711f19e6800f"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="59cc65c7-a27e-42cd-b2b8-9bce09b2251e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="5f68d43b-1614-417e-bc5c-12e7d0ed2a2d"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="05fc4a20-8f98-40b2-a20e-e6d0620f830a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="1738d318-4fd2-485a-bba4-7c998635d6f6"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="bdcd6a92-345d-419e-9949-d3ed31baebf1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="8ac52fa0-94f0-4b1a-8d2b-bf2c55c2890c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="92f53d0b-5b55-489d-b869-9171a62da612"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6273d9da-fb9b-4a64-b0dd-72763671bca8"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="3f3e7cee-8deb-4867-9007-91e4adc6033f"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>7B0nKhSfmyNfiG18G2Q1En4fGbdJtl9y1/N0pDBvAXY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>9JJw2J+fAmU2hy80D6P2EH940nLVOyV/2ux515NR9DbzL/djpguAIqzXfk7pnaHzYkEr/iXmVwrgKJ/mbpQfTw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>8ba84f0c-553c-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>8ba84f0c-553c-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос1</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>8ba84f0c-553c-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu3" searchProperties="true" id="e5d486d4-5e37-42fe-890b-af8ac3ae94a4"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="3816ff76-7fde-4a7c-908e-db073f3bb80a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA17</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA17</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="6b0feddc-c18f-4a92-8b1a-ad50cbb97504"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="dd3e7627-610e-40b6-9822-83187f03beed"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="117db460-44ce-48cd-8de0-a033d3dcefd7"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="ec136a55-0d80-4276-b743-bb31fd8fda2a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="084f96d0-399b-4761-9280-0ecd4f29e2b7"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="11a6a754-9752-4819-aa21-4324ac0a64a4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="c762a17c-637b-4aa5-9636-4c1a71d16521"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="e0016f67-489f-4170-84d6-718046086268"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="9c1ba4d2-e337-4705-82c2-6b24370f8688"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="80ae991c-de91-4dd6-95ac-510bccc95da7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c1be0e8a-a971-4d52-a78e-ba09d3093197"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="ba4a6859-49ef-44f5-9bfe-b9127325c703"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>BQxkLFX2i0SOgrsvDctYfp7Ww+4PAvwccPj8qM6R7Jk=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>smfglhxR322+rkxodtubtONF9fRjJ/TuMkoCoZEFSfjrkb1cOGfPmg46srq7t5fD0kfYd0dIxfHSbgp/VWBrTw==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>907196ed-553c-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>907196ed-553c-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>907196ed-553c-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu4" searchProperties="true" id="e078bd93-e06b-4844-96b0-319fd830a58c"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="e85999f7-bd3b-4bcb-b1c8-ddf3c4bc8dfa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://foiv_emu/1.0.0">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest> </con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="83a582e5-a7d0-4e36-85a6-2ea0a13d4a73"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="6aae5717-13a1-45ed-8a68-7ead787eb715"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="63fd46f2-a373-4533-ae0c-37bb69b90f9e"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="4ab47622-e887-4328-ba51-550c3a805d45"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="6db0f0c4-7236-49d7-b518-05509af90641"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="48733be8-527b-4b09-81a3-944518607fd7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="389d9957-9ee2-4d1a-be4f-43a6205377ab"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="4aa9ac6c-e954-4add-a9b5-b77b4b64b98d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="c13be4e8-b187-4299-94a8-fc71cb1994d4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="65c127ba-e9c6-4fc1-9fb0-98acbd4f7c05"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="673ac3ba-1378-4aad-8797-309d05a8513b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="d392ac8b-18be-4658-9041-714918427afd"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>y7w0vOb+kPODpqE77laboKweeDC3ArmSZtZ3mkcIsMs=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>tpSGZ5oG8Niwe1RThLvuGx+tlBbbEcrHJhOebGFP1Ux2TkyYvReWYRtchzvVWs0gR52kxa7NTnb7ewLFfG2E4g==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>317f562e-553e-11e5-8ddc-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>317f562e-553e-11e5-8ddc-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://foiv_emu/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest> </ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>317f562e-553e-11e5-8ddc-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu_KPFalse" searchProperties="true" id="7afa7cca-704c-4554-8596-1b4fb2c9d29d"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="4b5c38fe-5eaf-4884-8d47-fa70efeb6f37"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.1">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="aa1f7497-2e84-4179-9b5b-85ffa6409943"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="fc469034-9c32-470b-922f-be63757ea5a1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="81fddd22-fd5a-4173-95b8-5f6914ad8aa5"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="54bce52c-2282-4624-b9f6-de77077d2d1e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="b9917c93-35d3-4506-be6f-7647f792136f"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="64fb4240-4d6d-43ac-b7a9-fa743496bd06"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="b3500581-f780-4ef7-9930-a1627c8b9396"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="6b93df63-f772-4303-a8e9-461a1a8fb612"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="7aa56740-003f-4317-a79d-ac1f86125a62"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="e65d1fa3-d59c-4e23-9c39-aedaac2de10a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="48f9ed1e-fbd1-4b84-a5ff-eb7306dd48e0"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="1c84ac7b-25b9-4791-9312-134e495c71ef"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>GaSKnjE2FBr3Mqfflhnla5aa+HluPlP3IHPVUyjMddU=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>DYWLzEXjdxfzzxFQc8jx7XA6pc4qcxsQqFmoYL2g7GQtuFnNG+hkO85AMEOtIB94A9lJ6t5W5nMIoNRa5A7o0g==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>43f0a704-520f-11e5-b9da-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>43f0a704-520f-11e5-b9da-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.1">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>43f0a704-520f-11e5-b9da-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu_ScenarioFalse" searchProperties="true" id="b57cbf3e-a89e-4d40-ae07-04479e1a3b98"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="fbc84284-f65e-4319-a006-a82184623609"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 &lt;ns1:Request>Запрос2&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="eb14d1d2-ada1-436b-9cc9-a9b17d091384"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="59fe7d7b-efe0-4724-9f47-b0263e81006c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="299ed6d4-ef6f-4c8c-8b84-096d9355b03c"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="708aecf1-a07e-4632-93bc-3468d6f2e3b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="5e82b493-e181-48bf-aa2f-2be741aea257"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="754e700f-dd80-4ab1-9d8b-ab624d1e0e25"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="217735a6-7e4a-42c3-a8f3-e84dff76b965"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="94270259-4d19-42e7-b717-25d7f3d06b4b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="e8afc99e-8a89-450f-85f5-0bf044724aa4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="b455541a-b99c-42a8-8167-dcba1528ecb0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f01468b6-d62b-401b-8bf6-1280890ed4ca"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="bd7815ed-a124-4e9f-8988-08e4a2c51a0b"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>PdO4QiAvUaMFy9cIhBApNZ6aPas9uNfuK/fUavTipyQ=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>XHn52L8DuCMmaLOYlsLfLS3Y039njJ495XGbzAwYgbjKtIk7nlX+WAtUkygejNqlGhJUmJ42gfV8n21ZovuyQg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>5bbae495-520f-11e5-b9da-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>5bbae495-520f-11e5-b9da-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос2</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>5bbae495-520f-11e5-b9da-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmu_XSLFalse" searchProperties="true" id="ab599395-2912-4ba6-988d-70d7ff70d0de"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="c830e2bd-9c54-474d-a1d0-4d6dfefb19db"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.2">                 &lt;ns1:Request>Запрос1&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>MakarovDA19</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="79a8b25e-b585-4585-9f7a-08727cb3add4"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="568e45ff-93ca-49b4-aea1-70372ee2e068"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="abac0781-fdb7-478f-bedd-5e4f7e31c50d"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="0d158842-c5a1-4982-ba02-b6b6432cd241"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="998e4978-c725-4209-a3ba-741a6c91f317"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="1188af7b-3c52-4d74-bee8-11d3312e38cb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="af990a8a-9fd0-453f-b65e-94cd8745877f"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="208ac269-071e-45ef-b7cb-f27342ce0c26"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="b3b22469-4306-4a5e-b587-4546e26bc54d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="4795dc11-2ddc-453f-b762-ca9ba04f2db3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0d45eadc-5a6b-4f78-807a-5fc861a831d5"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="f1a889db-02e1-4642-9613-b040f8e5f78a"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>msFALwRbknHeRgpt9+BJWuXtxrHPM8z3Z0n/C0857z4=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>gAaS/jYY1q8bu+HSTPDlwCwQ1IjPKJvZF0S7wJkB+mlx1YNRbMUD/y6o0vF9PRiBq/VJn7p/CX0stck2ypFBAg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>717ecad6-520f-11e5-b9da-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>717ecad6-520f-11e5-b9da-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.2">                 <ns1:Request>Запрос1</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata>	<ns:TestMessage/></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value/></con:property><con:property><con:name>messageId</con:name><con:value>717ecad6-520f-11e5-b9da-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendRequestEmuRoiv" searchProperties="true" id="4bf280c0-a0d2-4948-bbfc-fcf53edb0f83"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="266f785b-0292-46a0-ac6c-9b4edeec25e5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataRequest xmlns:ns1="urn://demo/roiv1">                 &lt;ns1:Request>Запрос&lt;/ns1:Request> &lt;/ns1:DataRequest></con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>123456</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>zapros.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>18c06582-3788-11e5-ba68-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isBusinessProcessMetadata</con:name><con:value>false</con:value></con:property><con:property><con:name>caseNumber</con:name><con:value>555</con:value></con:property><con:property><con:name>serviceOrFunction</con:name><con:value>SERVICE</con:value></con:property><con:property><con:name>serviceOrFunctionCode</con:name><con:value>654</con:value></con:property><con:property><con:name>isTestMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>transactionCode</con:name><con:value/></con:property><con:property><con:name>autoTransactionCode</con:name><con:value>false</con:value></con:property><con:property><con:name>transactionCodeContent</con:name><con:value>{"systemFrguId":"systemFrgu","serviceFrguId":"serviceFrguId","extendedServiceInfo":"Service description","extendedCustomerInfo":"Customer description"}</con:value></con:property><con:property><con:name>nodeID</con:name><con:value/></con:property><con:property><con:name>EOL</con:name><con:value/></con:property><con:property><con:name>referenceMessageID</con:name><con:value/></con:property><con:property><con:name>frgu</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="de04f4a4-7e39-4c10-a967-704f7cfa4ead"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()

//log.info(uuid)</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="3d829e3e-eb81-4fcf-a3d8-5d5eaac4d01d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedRequestData" id="a79c7f6e-e8ef-4c92-916e-c2c1ca74b304"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry
import java.util.Date
import java.util.Calendar

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

transactionCodeData = context.expand ('${transactionCode}')

referenceMessageID = context.expand ('${referenceMessageID}')
if (!referenceMessageID?.trim()) {
	referenceMessageID = testRunner.testCase.getPropertyValue("messageId")
}

nodeIdData = context.expand('${nodeID}')
if (nodeIdData?.trim()) {
	nodeIdData = '<ns:NodeID>' + nodeIdData + '</ns:NodeID>'
}

EOLData = context.expand('${EOL}')
if (EOLData?.trim()) {
     Calendar cal = Calendar.instance   
     cal.add(Calendar.SECOND, EOLData.toInteger())
     timeZone = TimeZone.getTimeZone("Etc/GMT")
	EOLData = '<ns:EOL>' + cal.time.format("yyyy-MM-dd'T'HH:mm:ss.SSS") + '+04:00' + '</ns:EOL>'
}

if(context.expand ('${autoTransactionCode}').toBoolean()) {
	def http = new HTTPBuilder( context.expand ('${#TestSuite#transactionMarker}' ))
	def postBody = context.expand ('${transactionCodeContent}')

	http.post( path:'/transaction-marker/marker', body: postBody,
           requestContentType: 'application/json' ) { resp -> transactionCodeData = "${resp.entity.content.text}" }
}

xml ='<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns2="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:ReferenceMessageID>' + referenceMessageID  + '</ns:ReferenceMessageID><ns:TransactionCode>'+transactionCodeData+'</ns:TransactionCode>'+nodeIdData+EOLData+'<ns2:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns2:MessagePrimaryContent>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns2:RefAttachmentHeader>'
	result = result+'		<ns2:uuid>'+fuuid+'</ns2:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns2:Hash>'+res[0]+'</ns2:Hash>'
	result = result+'		<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	result = '	<ns2:AttachmentHeader>'
	result = result+'	<ns2:contentId>'+file+'</ns2:contentId>'
	result = result+'	<ns2:MimeType>'+mimeType+'</ns2:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns2:SignaturePKCS7>'+res[1]+'</ns2:SignaturePKCS7>'
	result = result+'	</ns2:AttachmentHeader>'
}

if(context.expand ('${isPersonalSignature}').toBoolean()){
	xml=xml+'	<ns:PersonalSignature>'
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/xmlSign')
	Map reqMap = new HashMap()
	reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	map.put('body', reqMap)
	http.post(map) { resp ->
		sign = "${resp.entity.content.text}"
	}
	xml = xml +sign+'</ns:PersonalSignature>'
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// Обработка MTOM-вложений
if (isAttachments && !isFtpAttachments) {
	log.info("MTOM " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	def idAttachments = context.expand ('${idAttachment}').split(";")
	def mimeTypes = context.expand ('${mimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml=xml+'	<ns2:AttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
		}
		xml=xml+'	</ns2:AttachmentHeaderList>'
	}
}

// Обработка FTP-вложений
if (isAttachments && isFtpAttachments) {
	log.info("FTP " + isAttachments.toString() + ", " + isFtpAttachments.toString())
	idAttachments = context.expand ('${ftpAttachment}').split(";")
	mimeTypes = context.expand ('${ftpMimeType}').split(";")
	if (idAttachments.length > 0 ) {
		xml = xml + '	<ns2:RefAttachmentHeaderList>'
		for(int i=0; i<idAttachments.length; i++){
			xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
		}
		xml = xml + '	</ns2:RefAttachmentHeaderList>'
	}
}

// Блок BusinessProcessMetadata
if(context.expand ('${isCaseInfo}').toBoolean() || context.expand('${frgu}')?.trim()){
	xml=xml+'	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">'
	if (context.expand ('${isCaseInfo}').toBoolean()) {
		xml=xml+'	<tns:CaseInfo>'
		xml=xml+'	<tns:CaseNumber>'+context.expand ('${caseNumber}')+'</tns:CaseNumber>'
		xml=xml+'	<tns:ServiceOrFunction>'+context.expand ('${serviceOrFunction}')+'</tns:ServiceOrFunction>'
		xml=xml+'	<tns:ServiceOrFunctionCode>'+context.expand ('${serviceOrFunctionCode}')+'</tns:ServiceOrFunctionCode>'
		xml=xml+'	</tns:CaseInfo>'
	}
	
	if(context.expand('${frgu}')?.trim() ){
		xml=xml+'	<tns:frgu>' + context.expand('${frgu}') + '</tns:frgu>'
	}
	xml=xml+'	</ns:BusinessProcessMetadata>'
}

if(context.expand ('${isTestMessage}').toBoolean()){
	xml=xml+'	<ns:TestMessage/>'
}

xml=xml+'</ns:SenderProvidedRequestData>'
log.info(xml)
return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="1518c629-26db-4e67-8d4d-b17918498153"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>senderProvidedRequestData</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedRequestData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="ced68ffc-d20e-45b2-bb8f-b13f8cc3ffa1"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def request = testRunner.testCase.getTestStepByName( "SendRequest" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath()+context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}

return xml]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="2f29a407-2b1c-4096-9a29-40b78c83d12f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachmentList</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="0c704f22-7720-4fcd-8948-63a232d8c5a1"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="sign to Param" id="868b8fb3-bc3f-4d70-8499-3c54a0b4da6c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:sourcePath/><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendRequest" id="e33cc034-c9fb-4a54-abde-1563e1a0bcfb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendRequest</con:operation><con:request name="SendRequest" id="57130f37-8169-4c5f-a2cd-088c842f3207"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@enable-mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="discardResponse">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@force_mtom">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@encode_attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:SendRequestRequest xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2">
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns2:CallerInformationSystemSignature>${#TestCase#sign}</ns2:CallerInformationSystemSignature>
      </ns2:SendRequestRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="4f013e78-72d2-4503-9cf7-2487b7935155"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>zapros.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>210752</con:size><con:contentId>zapros.jpg</con:contentId><con:part>zapros.jpg</con:part><con:data></con:data><con:id>1f216d53-a807-42bf-a10f-2a2506e4b746</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest 1" id="9cd20cbd-1cb6-42d3-a83a-7cf42edb72b4"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_CONSUMER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>5dHlI2+r+EJtYoC/KfqHHSGHKZAwtVsu7ZAvcX6ID4I=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>0ZISEJNM6+uqJ2TnD2/MaRslQTY9PxNf5+KRKr6cZOHSKzu5rBBXz7cFrR7/yvAqbNss61Cr3mR0mHPv+qjfpg==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIKbTCCChygAwIBAgIKGmIRBgACAAABdDAIBgYqhQMCAgMwggEUMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSUwIwYDVQQJDBzRg9C7LiDQo9C00LDQu9GM0YbQvtCy0LAsIDg1MSAwHgYJKoZIhvcNAQkBFhF1Y0BuaWkudm9za2hvZC5ydTELMAkGA1UEBhMCUlUxGDAWBgNVBAgMDzc3INCc0L7RgdC60LLQsDEVMBMGA1UEBwwM0JzQvtGB0LrQstCwMScwJQYDVQQKDB7QpNCT0KPQnyDQndCY0JggItCS0L7RgdGF0L7QtCIxLDAqBgNVBAMMI9Cj0KYg0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMB4XDTE0MTIwODE0MzQwMFoXDTE2MDMwODE0NDQwMFowggINMRYwFAYFKoUDZAMSCzEzODMwNzQzMDUyMRgwFgYFKoUDZAESDTEwMzc3MzkyOTA2NzYxGjAYBggqhQMDgQMBARIMMDA3NzA0MDA3MTU3MSMwIQYJKoZIhvcNAQkBFhRkLm1ha2Fyb3ZAdm9za2hvZC5ydTELMAkGA1UEBhMCUlUxITAfBgNVBAgeGAA3ADcAIAQzAC4AIAQcBD4EQQQ6BDIEMDEVMBMGA1UEBx4MBBwEPgRBBDoEMgQwMSswKQYDVQQKHiIEJAQTBCMEHwAgBB0EGAQYACAAIgQSBD4EQQRFBD4ENAAiMTkwNwYDVQQLHjAEHgRCBDQENQQ7ACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8AIAQdBBgEFAAxADIxKzApBgNVBAMeIgQkBBMEIwQfACAEHQQYBBgAIAAiBBIEPgRBBEUEPgQ0ACIxMTAvBgNVBAkeKARDBDsALgAgBCMENAQwBDsETARGBD4EMgQwACwAIAQ0AC4AIAA4ADUxQzBBBgNVBAweOgQdBDAERwQwBDsETAQ9BDgEOgAgBD4EQgQ0BDUEOwQwACAEQgQ1BEEEQgQ4BEAEPgQyBDAEPQQ4BE8xKzApBgNVBCoeIgQUBDwEOARCBEAEOAQ5ACAEEAQ9BDQEQAQ1BDUEMgQ4BEcxFzAVBgNVBAQeDgQcBDAEOgQwBEAEPgQyMGMwHAYGKoUDAgITMBIGByqFAwICJAAGByqFAwICHgEDQwAEQFAKZ9qYRBeFa7af7Zt41+wA+QFIaAioZMWnCyQCIru7L5MbdkPG/oSdtfUH7lM/nZgDtte0UDU01lbxvCsZ5rKjggZPMIIGSzAOBgNVHQ8BAf8EBAMCBPAwJgYDVR0lBB8wHQYIKwYBBQUHAwQGByqFAwICIgYGCCsGAQUFBwMCMB0GA1UdDgQWBBQr8XtRvck+Zy2ZS4q+npP79EFUvzCCAVUGA1UdIwSCAUwwggFIgBSX0rlg04dznfUMl6JU4Y/7coNY9qGCARykggEYMIIBFDEYMBYGBSqFA2QBEg0xMDM3NzM5MjkwNjc2MRowGAYIKoUDA4EDAQESDDAwNzcwNDAwNzE1NzElMCMGA1UECQwc0YPQuy4g0KPQtNCw0LvRjNGG0L7QstCwLCA4NTEgMB4GCSqGSIb3DQEJARYRdWNAbmlpLnZvc2tob2QucnUxCzAJBgNVBAYTAlJVMRgwFgYDVQQIDA83NyDQnNC+0YHQutCy0LAxFTATBgNVBAcMDNCc0L7RgdC60LLQsDEnMCUGA1UECgwe0KTQk9Cj0J8g0J3QmNCYICLQktC+0YHRhdC+0LQiMSwwKgYDVQQDDCPQo9CmINCk0JPQo9CfINCd0JjQmCAi0JLQvtGB0YXQvtC0IoIQfNj+yIyMiphMwCiUBfSZRTCCAQAGA1UdHwSB+DCB9TAuoCygKoYoaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QxMjE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDEudm9za2hvZC5ydS9jZHAvdm9za2hvZDEyMTQuY3JsMC+gLaArhilodHRwOi8vcGtpLnZvc2tob2QucnUvY2RwL3Zvc2tob2QxMjE0LmNybDAuoCygKoYoaHR0cDovL3JhLnZvc2tob2QucnUvY2RwL3Zvc2tob2QxMjE0LmNybDAwoC6gLIYqaHR0cDovL2NkcDMudm9za2hvZC5ydS9jZHAvdm9za2hvZDEyMTQuY3JsMIIBpAYIKwYBBQUHAQEEggGWMIIBkjAuBggrBgEFBQcwAYYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjAuBggrBgEFBQcwAoYiaHR0cDovL3JhLnZvc2tob2QucnUvb2NzcC9vY3NwLnNyZjA7BggrBgEFBQcwAoYvaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMTIxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMTIxNC5jcnQwPQYIKwYBBQUHMAKGMWh0dHA6Ly91Yy52b3NraG9kLnJ1L2NkcC9jcm9zcy12b3NraG9kLTEyMTQtMi5jcnQwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jZHAxLnZvc2tob2QucnUvY2RwL2Nyb3NzLXZvc2tob2QtMTIxNC0yLmNydDA0BggrBgEFBQcwAoYoaHR0cDovL3VjLnZvc2tob2QucnUvY2RwL3Zvc2tob2QxMjE0LmNydDArBgNVHRAEJDAigA8yMDE0MTIwODE0MzQwMFqBDzIwMTUxMjA4MTQzNDAwWjAyBgkrBgEEAYI3FQoEJTAjMAoGCCsGAQUFBwMEMAkGByqFAwICIgYwCgYIKwYBBQUHAwIwHQYDVR0gBBYwFDAIBgYqhQNkcQEwCAYGKoUDZHECMDYGBSqFA2RvBC0MKyLQmtGA0LjQv9GC0L7Qn9GA0L4gQ1NQIiAo0LLQtdGA0YHQuNGPIDMuNikwggEzBgUqhQNkcASCASgwggEkDCsi0JrRgNC40L/RgtC+0J/RgNC+IENTUCIgKNCy0LXRgNGB0LjRjyAzLjYpDFMi0KPQtNC+0YHRgtC+0LLQtdGA0Y/RjtGJ0LjQuSDRhtC10L3RgtGAICLQmtGA0LjQv9GC0L7Qn9GA0L4g0KPQpiIg0LLQtdGA0YHQuNC4IDEuNQxP0KHQtdGA0YLQuNGE0LjQutCw0YIg0YHQvtC+0YLQstC10YLRgdGC0LLQuNGPIOKEliDQodCkLzEyNC0yMjM4INC+0YIgMDQuMTAuMjAxMwxP0KHQtdGA0YLQuNGE0LjQutCw0YIg0YHQvtC+0YLQstC10YLRgdGC0LLQuNGPIOKEliDQodCkLzEyOC0yMzUxINC+0YIgMTUuMDQuMjAxNDAIBgYqhQMCAgMDQQCt3VSgsVyMCRMiodWU4TUPigwpygXY+CZ0SBp1ZA3MJOCoELj+Op424pgIvh344qbok+clHMJ2Cxk3JFQGzv5U</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedRequestData Id="SIGNED_BY_CONSUMER" xmlns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns2="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>97359587-3b4d-11e5-95e2-d4c9eff07b77</ns:MessageID><ns:ReferenceMessageID>97359587-3b4d-11e5-95e2-d4c9eff07b77</ns:ReferenceMessageID><ns:TransactionCode></ns:TransactionCode><ns2:MessagePrimaryContent><ns1:DataRequest xmlns:ns1="urn://pa/demo3/1.0.0">                 <ns1:Request>Запрос</ns1:Request> </ns1:DataRequest></ns2:MessagePrimaryContent>	<ns2:AttachmentHeaderList>	<ns2:AttachmentHeader>	<ns2:contentId>zapros.jpg</ns2:contentId>	<ns2:MimeType>image/jpeg</ns2:MimeType>	<ns2:SignaturePKCS7>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</ns2:SignaturePKCS7>	</ns2:AttachmentHeader>	</ns2:AttachmentHeaderList>	<ns:BusinessProcessMetadata xmlns:tns="urn://x-artefacts-smev-gov-ru/services/message-exchange/business-process-metadata/1.0">	<tns:frgu>123</tns:frgu>	</ns:BusinessProcessMetadata></ns:SenderProvidedRequestData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>zapros.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:zapros.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>97359587-3b4d-11e5-95e2-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendResponseMTOM" searchProperties="true" id="ec61ab23-1a78-476c-9c86-ff57b00af705"><con:settings/><con:testStep type="properties" name="BusinessProperties" id="106fdbb3-591e-4b5c-9fdc-6f0f924d994e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>paramContent</con:name><con:value>&lt;ns1:DataResponse xmlns:ns1="urn://pa/demo3/1.0.0">&lt;ns1:Response>ResponseData&lt;/ns1:Response>&lt;/ns1:DataResponse></con:value></con:property><con:property><con:name>to</con:name><con:value>1039|pa_demo3_1.0.0_DataRequest|bc2ba3df-3d07-11e5-921e-e2a1004e491b|bc2ba3df-3d07-11e5-921e-e2a1004e491b</con:value></con:property><con:property><con:name>certNameOV</con:name><con:value>makarovDA</con:value></con:property><con:property><con:name>certPasswordOV</con:name><con:value>123456</con:value></con:property><con:property><con:name>certNameSP</con:name><con:value>IS1</con:value></con:property><con:property><con:name>certPasswordSP</con:name><con:value>qweasd</con:value></con:property><con:property><con:name>isPersonalSignature</con:name><con:value>false</con:value></con:property><con:property><con:name>isAttachment</con:name><con:value>true</con:value></con:property><con:property><con:name>idAttachment</con:name><con:value>otvet.jpg</con:value></con:property><con:property><con:name>mimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isFtpAttachment</con:name><con:value>false</con:value></con:property><con:property><con:name>ftpAttachment</con:name><con:value>91522f35-1599-11e5-9ee5-d4c9eff07b77/sample10M.tmp</con:value></con:property><con:property><con:name>ftpMimeType</con:name><con:value>image/jpeg</con:value></con:property><con:property><con:name>isRequestRejected</con:name><con:value>false</con:value></con:property><con:property><con:name>rejectionReasonCode</con:name><con:value>UNKNOWN_REQUEST_DESCRIPTION</con:value></con:property><con:property><con:name>rejectionReason</con:name><con:value>Человекочитаемая причина отказа</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="generateUUID" id="87c0ec7f-9d9c-4e79-92df-371212291053"><con:settings/><con:config><script>import com.fasterxml.uuid.*

def nic = EthernetAddress.fromInterface()
def  uuidGenerator = Generators.timeBasedGenerator(nic)
def uuid = uuidGenerator.generate()</script></con:config></con:testStep><con:testStep type="transfer" name="uuid to Param" id="c50d26d7-2e61-452b-87ae-c83f26433fde"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>setMessageId</con:name><con:sourceType>result</con:sourceType><con:sourceStep>generateUUID</con:sourceStep><con:targetType>messageId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="senderProvidedResponseData" id="fa3b6ae8-e422-498f-bcdd-f79607d66099"><con:settings/><con:config><script><![CDATA[import groovyx.net.http.HTTPBuilder
import  groovyx.net.http.ContentType
import groovyx.net.http.Method
import java.security.MessageDigest
import groovyx.net.http.EncoderRegistry

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

xml ='<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="'+context.expand ('${#TestSuite#ns1}')+'" xmlns:ns1="'+context.expand ('${#TestSuite#ns2}')+'">'
xml=xml+'	<ns:MessageID>'+testRunner.testCase.getPropertyValue("messageId")+'</ns:MessageID><ns:To>'+context.expand ('${to}')+'</ns:To>'

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def attachedFileFTP(file, mimeType) {
	// file = uuid/ filename
	def (fuuid, fname) = file.split("/")
	//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
	// Ниже относительные пути для linux
	def filePath = context.expand ('${#TestSuite#uploadDir}')
	def result = '	<ns1:RefAttachmentHeader>'
	result = result+'		<ns1:uuid>'+fuuid+'</ns1:uuid>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',fname)

	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'		<ns1:Hash>'+res[0]+'</ns1:Hash>'
	result = result+'		<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:RefAttachmentHeader>'
}

def attachedFileMTOM(file, mimeType) {
	def http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
	result = '	<ns1:AttachmentHeader>'
	result = result+'	<ns1:contentId>'+file+'</ns1:contentId>'
	result = result+'	<ns1:MimeType>'+mimeType+'</ns1:MimeType>'
	
	def sign = ""
	Map map = new HashMap()
	map.put('path','/smev/byteSign')
	Map reqMap = new HashMap()
	reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
	reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
	reqMap.put('certName',context.expand ('${certNameSP}'))
	reqMap.put('certPass',context.expand ('${certPasswordSP}'))
	reqMap.put('fileName',file)
	map.put('body', reqMap)
	http.post(map) { resp ->sign = "${resp.entity.content.text}"}
	
	def res = sign.split(";")
	result = result+'	<ns1:SignaturePKCS7>'+res[1]+'</ns1:SignaturePKCS7>'
	result = result+'	</ns1:AttachmentHeader>'
}


if(context.expand ('${isRequestRejected}').toBoolean()){
	def rejectionReasonCode = context.expand ('${rejectionReasonCode}').split(";")
	def rejectionReason = context.expand ('${rejectionReason}').split(";")
	for(int i=0;i<rejectionReasonCode.length;i++){
		xml=xml+'	<ns:RequestRejected>'
		xml=xml+'	<ns:RejectionReasonCode>'+rejectionReasonCode[i]+'</ns:RejectionReasonCode>'
		xml=xml+'	<ns:RejectionReason>'+rejectionReason[i]+'</ns:RejectionReason>'
		xml=xml+'	</ns:RequestRejected>'
	}
} else {
	xml=xml+'	<ns1:MessagePrimaryContent>'+context.expand ('${paramContent}')+'</ns1:MessagePrimaryContent>'
	if(context.expand ('${isPersonalSignature}').toBoolean()){
		xml=xml+'	<ns:PersonalSignature>'
		def sign = ""
		Map map = new HashMap()
		map.put('path','/smev/xmlSign')
		Map reqMap = new HashMap()
		reqMap.put('xmlBase64',context.expand ('${paramContent}').bytes.encodeBase64().toString())
		reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
		reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
		reqMap.put('certName',context.expand ('${certNameSP}'))
		reqMap.put('certPass',context.expand ('${certPasswordSP}'))
		map.put('body', reqMap)
		http.post(map) { resp ->
			sign = "${resp.entity.content.text}"
		}
		xml = xml +sign+'</ns:PersonalSignature>'
	}

	// Обработка вложений
	def isAttachments = context.expand ('${isAttachment}').toBoolean()
	def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()
	
	// Обработка MTOM-вложений
	if (isAttachments && !isFtpAttachments) {
		def idAttachments = context.expand ('${idAttachment}').split(";")
		def mimeTypes = context.expand ('${mimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml=xml+'	<ns1:AttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml=xml+attachedFileMTOM(idAttachments[i], mimeTypes[i])
			}
			xml=xml+'	</ns1:AttachmentHeaderList>'
		}
	}
	
	// Обработка FTP-вложений
	if (isAttachments && isFtpAttachments) {
		idAttachments = context.expand ('${ftpAttachment}').split(";")
		mimeTypes = context.expand ('${ftpMimeType}').split(";")
		if (idAttachments.length > 0 ) {
			xml = xml + '	<ns1:RefAttachmentHeaderList>'
			for(int i=0; i<idAttachments.length; i++){
				xml = xml + attachedFileFTP(idAttachments[i], mimeTypes[i])
			}
			xml = xml + '	</ns1:RefAttachmentHeaderList>'
		}
	}
}
	
xml=xml+'</ns:SenderProvidedResponseData>'
]]></script></con:config></con:testStep><con:testStep type="transfer" name="sender to Param" id="dc8749d6-19c3-4f9a-9f23-aee1620584ca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sender</con:name><con:sourceType>result</con:sourceType><con:sourceStep>senderProvidedResponseData</con:sourceStep><con:targetType>senderXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="attachmentList" id="51bdaba2-168e-407b-a47e-e27348822494"><con:settings/><con:config><script><![CDATA[groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def request = testRunner.testCase.getTestStepByName( "SendResponse" ).testRequest
def xml = ""
for( a in request.attachments ) {
   request.removeAttachment( a )
}

// Обработка вложений
def isAttachments = context.expand ('${isAttachment}').toBoolean()
def isFtpAttachments = context.expand ('${isFtpAttachment}').toBoolean()

// MTOM
if (isAttachments && !isFtpAttachments) {
	def idAttachments = context.expand ('${idAttachment}').split(";")
	xml=xml+'	<ns1:AttachmentContentList>'
	for(int i=0; i<idAttachments.length; i++){
		xml=xml+'	<ns1:AttachmentContent>'
		xml=xml+'	<ns1:Id>'+idAttachments[i]+'</ns1:Id>'
		def list = ""
		def attachment =""
		def fileName =idAttachments[i]
		//def filePath = groovyUtils.getProjectPath() + context.expand ('${#TestSuite#uploadDir}')
		// Ниже относительные пути для linux
		def filePath = context.expand ('${#TestSuite#uploadDir}')
		log.info "file: " + filePath + fileName
 		def dir = new File(filePath)
			if(!dir.exists()){
				dir.mkdirs()
		}
		def file = new File(filePath + fileName  )
		if ( file == null || file.createNewFile()) {
			def base64 = context.expand ('${#TestSuite#signServiceUrl}')+'smev/base64Encode?fileName='+fileName
			def fos = new FileOutputStream(filePath +fileName)
			fos.write(base64.toURL().text.decodeBase64())
			fos.close()
		} 
		attachment = request.attachFile( file, true )
		attachment.contentType = "application/octet-stream"
		list = fileName.tokenize("\\")
		attachment.setPart(list.last())
	
		xml=xml+'	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:'+list.last()+'"></xop:Include></ns1:Content>'
		xml=xml+'	</ns1:AttachmentContent>' 
	}
	xml=xml+'	</ns1:AttachmentContentList>'
}
return xml
//log.info xml
]]></script></con:config></con:testStep><con:testStep type="transfer" name="attachment to Param" id="2541dd06-4d27-4c5c-8a70-9c5727920f0e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>attachment</con:name><con:sourceType>result</con:sourceType><con:sourceStep>attachmentList</con:sourceStep><con:targetType>attachmentXML</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="sign" id="7c27f30e-905d-46c0-8b54-502fa7b6b171"><con:settings/><con:config><script>import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import groovyx.net.http.Method
import groovyx.net.http.EncoderRegistry

http = new HTTPBuilder(context.expand ('${#TestSuite#signServiceUrl}'),ContentType.URLENC)
EncoderRegistry encoders = new EncoderRegistry()
encoders.setCharset('UTF-8')
http.setEncoderRegistry(encoders)

def sign = ""
Map map = new HashMap()
map.put('path','/smev/xmlSign')
Map reqMap = new HashMap()
reqMap.put('xmlBase64',testRunner.testCase.getPropertyValue( "senderXML" ).bytes.encodeBase64().toString())
reqMap.put('url',context.expand ('${#TestSuite#connectionURL}'))
reqMap.put('storeName',context.expand ('${#TestSuite#storeName}'))
reqMap.put('certName',context.expand ('${certNameOV}'))
reqMap.put('certPass',context.expand ('${certPasswordOV}'))
map.put('body', reqMap)
http.post(map) { resp ->
sign = "${resp.entity.content.text}"
}
return sign</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ebd9e744-bacd-450e-a010-6b249cbc6eb6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>result</con:sourceType><con:sourceStep>sign</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="SendResponse" id="51c72a8d-8501-4a6b-93cb-b3717a965c11"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SMEVMessageExchangeSoap11Binding</con:interface><con:operation>SendResponse</con:operation><con:request name="SendResponse" id="0a96863b-2a78-484a-ac64-3650a27e03e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#connectionURL}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:SendResponseRequest>
         ${#TestCase#senderXML}${#TestCase#attachmentXML}
         <ns:CallerInformationSystemSignature>${#TestCase#sign}</ns:CallerInformationSystemSignature>
      </ns:SendResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="583d0f0d-2d85-4d72-8486-43c66960df42"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:attachment><con:name>otvet.jpg</con:name><con:contentType>application/octet-stream</con:contentType><con:size>480913</con:size><con:contentId>otvet.jpg</con:contentId><con:part>otvet.jpg</con:part><con:data></con:data><con:id>a21d17c5-c756-4f41-a849-a2f7628106e5</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>sign</con:name><con:value><![CDATA[<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411"/><ds:Reference URI="#SIGNED_BY_PROVIDER"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:Transform Algorithm="urn://smev-gov-ru/xmldsig/transform"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#gostr3411"/><ds:DigestValue>cjAvXF0T/uoBT6sTLGPGq02JRL4t9BOw8VxVyT2Zw1w=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>9+ifYOlrvx7a9RI9tLcL+gve9DbWjXj8M4ym50M99NlWzadhw5qeaf4YA6ut97lYnQI+AXYZtq9fqJ3rvz6+3A==</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>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</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature>]]></con:value></con:property><con:property><con:name>senderXML</con:name><con:value><![CDATA[<ns:SenderProvidedResponseData Id="SIGNED_BY_PROVIDER" xmlns:ns="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2" xmlns:ns1="urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2">	<ns:MessageID>e7e10897-4d5d-11e5-a10f-d4c9eff07b77</ns:MessageID><ns:To>1039|pa_demo3_1.0.0_DataRequest|bc2ba3df-3d07-11e5-921e-e2a1004e491b|bc2ba3df-3d07-11e5-921e-e2a1004e491b</ns:To>	<ns1:MessagePrimaryContent><ns1:DataResponse xmlns:ns1="urn://pa/demo3/1.0.0"><ns1:Response>ResponseData</ns1:Response></ns1:DataResponse></ns1:MessagePrimaryContent>	<ns1:AttachmentHeaderList>	<ns1:AttachmentHeader>	<ns1:contentId>otvet.jpg</ns1:contentId>	<ns1:MimeType>image/jpeg</ns1:MimeType>	<ns1:SignaturePKCS7>MIICrwYJKoZIhvcNAQcCoIICoDCCApwCAQExDDAKBgYqhQMCAgkFADALBgkqhkiG9w0BBwGgggF0MIIBcDCCAR2gAwIBAgIEH4DHpDAKBgYqhQMCAgMFADAtMRAwDgYDVQQLEwdTWVNURU0xMQwwCgYDVQQKEwNJUzExCzAJBgNVBAYTAlJVMB4XDTE1MDUwNzA5MzEyOFoXDTE4MDUwNjA5MzEyOFowLTEQMA4GA1UECxMHU1lTVEVNMTEMMAoGA1UEChMDSVMxMQswCQYDVQQGEwJSVTBjMBwGBiqFAwICEzASBgcqhQMCAiMBBgcqhQMCAh4BA0MABEAenuQyd7r9HeV4gEbqkIqTRTr2mwu5t+ad9lnflN5X8wa/zeIt8QX81HO9//oRL2O6568vO0sBt9qmgjYfKdtnoyEwHzAdBgNVHQ4EFgQUFOEyCXHT/XPYY/k4jWsMPBU2aDwwCgYGKoUDAgIDBQADQQDjjtwVbiPy+606eY3ux8adbAOn2tTkC30F2t1BjP0+gjY5eewh9TJAF9+0sISJqCvhz46PDxmxxOg8Sf+OcqyHMYIBAjCB/wIBATA1MC0xEDAOBgNVBAsTB1NZU1RFTTExDDAKBgNVBAoTA0lTMTELMAkGA1UEBhMCUlUCBB+Ax6QwCgYGKoUDAgIJBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNTA4MjgwODE4MzdaMC8GCSqGSIb3DQEJBDEiBCAL6kl87Y9xlPoXPFYqukSsamAqaiU8WgAmHOGIARY/mjAKBgYqhQMCAhMFAARAJLnSNeNOUkvdzUex+joo0J1jba7UPQsMkitQK+63olBZgdZJFgppYObOYRWXNgA2w88c1VmWTHmVhFfx8kZDzg==</ns1:SignaturePKCS7>	</ns1:AttachmentHeader>	</ns1:AttachmentHeaderList></ns:SenderProvidedResponseData>]]></con:value></con:property><con:property><con:name>attachmentXML</con:name><con:value><![CDATA[	<ns1:AttachmentContentList>	<ns1:AttachmentContent>	<ns1:Id>otvet.jpg</ns1:Id>	<ns1:Content><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:otvet.jpg"></xop:Include></ns1:Content>	</ns1:AttachmentContent>	</ns1:AttachmentContentList>]]></con:value></con:property><con:property><con:name>messageId</con:name><con:value>e7e10897-4d5d-11e5-a10f-d4c9eff07b77</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>signServiceUrl</con:name><con:value>http://85.143.127.146:2319/</con:value></con:property><con:property><con:name>connectionURL</con:name><con:value>http://172.20.3.12:7500/ws?wsdl</con:value></con:property><con:property><con:name>storeName</con:name><con:value>HDImageStore</con:value></con:property><con:property><con:name>ns1</con:name><con:value>urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2</con:value></con:property><con:property><con:name>ns2</con:name><con:value>urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2</con:value></con:property><con:property><con:name>uploadDir</con:name><con:value>C:\Проекты\СМЭВ\Проекты SoapUI\smev\file\</con:value></con:property><con:property><con:name>downloadDir</con:name><con:value>C:\Проекты\СМЭВ\Проекты SoapUI\smev\downloads\</con:value></con:property><con:property><con:name>ftpUrl</con:name><con:value>172.20.3.12</con:value></con:property><con:property><con:name>ftpLogin</con:name><con:value>anonymous</con:value></con:property><con:property><con:name>ftpPassword</con:name><con:value>ftp4j</con:value></con:property><con:property><con:name>ftpPort</con:name><con:value>21</con:value></con:property><con:property><con:name>transactionMarker</con:name><con:value>http://10.215.0.77:8580/transaction-marker/marker</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>